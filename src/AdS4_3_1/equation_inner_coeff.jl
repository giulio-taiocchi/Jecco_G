
#= tilde, hat, etc, definitions

We use these macros as shorthand notation. For instance

  @tilde_inner("B")

should expand to

  Bt = B_x -  (Fx * u + xi_x) * Bp

etc.

=#
macro tilde_inner(fname::String)
    ft    = Symbol(fname, "t")
    f_x   = Symbol(fname, "_x")
    fp    = Symbol(fname, "p")
    return esc( :($ft = $f_x - (Fx * u + xi_x) * $fp) )
end
macro hat_inner(fname::String)
    fh    = Symbol(fname, "h")
    f_y   = Symbol(fname, "_y")
    fp    = Symbol(fname, "p")
    return esc( :($fh = $f_y - (Fy * u + xi_y) * $fp) )
end

macro bar_inner(fname::String)
    fb    = Symbol(fname, "b")
    f_xx  = Symbol(fname, "_xx")
    fpp   = Symbol(fname, "pp")
    fp_x  = Symbol(fname, "p_x")
    return esc( :($fb = $f_xx + (Fx * u + xi_x) * ( -2*($fp_x) + (Fx * u + xi_x) * ($fpp) )) )
end

macro star_inner(fname::String)
    fs    = Symbol(fname, "s")
    f_yy  = Symbol(fname, "_yy")
    fpp   = Symbol(fname, "pp")
    fp_y  = Symbol(fname, "p_y")
    return esc( :($fs = $f_yy + (Fy * u + xi_y) * ( -2*($fp_y) + (Fy * u + xi_y)* ($fpp) )) )
end

macro cross_inner(fname::String)
    fc    = Symbol(fname, "c")
    f_xy  = Symbol(fname, "_xy")
    fpp   = Symbol(fname, "pp")
    fp_x  = Symbol(fname, "p_x")
    fp_y  = Symbol(fname, "p_y")
    return esc( :($fc = $f_xy  - (Fx * u + xi_x) * ($fp_y) -
                  (Fy * u + xi_y) * ( $fp_x -(Fx * u + xi_x) * ($fpp) ) ) )
end



# assuming
# (A d_uu + B d_u + C Id) f = -S

function S_eq_coeff!(ABCS::Vector, vars::Tuple, ::Inner)
    ( u, xi, B, Bp, G, Gp) = vars

 
  
x0 = u ^ 6
x1 = u ^ 5
x2 = u ^ 4
x3 = 3 * u
x4 = (-B * x3 + Bp) ^ 2 * cosh(G * u ^ 3) ^ 2
x5 = (-G * x3 + Gp) ^ 2
x6 = x0 * xi
ABCS[1] = 4 * x0
ABCS[2] = 24 * x1
ABCS[3] = x2 * (9 * G ^ 2 * x0 - 6 * G * Gp * x1 + Gp ^ 2 * x2 + x2 * x4 + 24)
ABCS[4] = x1 * x4 + x1 * x5 + x4 * x6 + x5 * x6

    nothing
end


# this is a coupled equation for Fx and Fy. the notation used is
#
# ( A11 d_uu Fx + A12 d_uu Fy + B11 d_u Fx + B12 d_u Fy + C11 Fx + C12 Fy ) = -S1
# ( A21 d_uu Fx + A22 d_uu Fy + B21 d_u Fx + B22 d_u Fy + C21 Fx + C22 Fy ) = -S2

function Fxy_eq_coeff!(AA::Matrix, BB::Matrix, CC::Matrix, SS::Vector, vars::Tuple, ::Inner)
    (
        u, xi, xi_x, xi_y,
        B     ,        G      ,       S      ,
        Bp    ,        Gp     ,       Sp     ,
        Bpp   ,        Gpp    ,       Spp    ,
        B_x   ,        G_x    ,       S_x    ,
        B_y   ,        G_y    ,       S_y    ,
        Bp_x  ,        Gp_x   ,       Sp_x   ,
        Bp_y  ,        Gp_y   ,       Sp_y   ,
       
    ) = vars
    
   

    u2 = u*u
    u3 = u*u2
    u4 = u2*u2
    u5 = u4*u
    u5 = u3*u2
    u6 = u3*u3
    u8 = u4*u4



x0 = u ^ 3
x1 = B * x0
x2 = exp(x1)
x3 = u * xi
x4 = S * x0
x5 = x3 + x4 + 1
x6 = x5 ^ 2
x7 = 2 * x0
x8 = x6 * x7
x9 = u ^ 2
x10 = Bp * x9
x11 = 3 * x1
x12 = G * x0
x13 = 2 * x12
x14 = cosh(x13)
x15 = -Bp
x16 = 3 * u
x17 = B * x16
x18 = x15 + x17
x19 = -x10 + x11 + x14 * x18 * x9
x20 = x2 * x9
x21 = 2 * Gp
x22 = 6 * u
x23 = G * x22
x24 = -x18
x25 = sinh(x13)
x26 = x24 * x25
x27 = -x21 + x23 - x26
x28 = u ^ 4
x29 = x28 * x6
x30 = 4 * Spp
x31 = 8 * xi
x32 = Sp * u
x33 = S * x9
x34 = xi ^ 2
x35 = u * x34
x36 = Bp ^ 2
x37 = Bp * x28
x38 = 6 * B
x39 = u ^ 5
x40 = S * x39
x41 = Sp * x38
x42 = 24 * xi
x43 = Bp * Sp
x44 = 12 * xi
x45 = 2 * x4
x46 = G * Gp
x47 = x28 * x46
x48 = Sp * x9
x49 = 16 * xi
x50 = B ^ 2
x51 = 9 * x39
x52 = G ^ 2
x53 = 18 * x52
x54 = Gp ^ 2
x55 = x0 * x54
x56 = S ^ 2
x57 = x39 * x56
x58 = Sp ^ 2 * x0
x59 = u ^ 6
x60 = u ^ 7
x61 = Bp * x60
x62 = B * Bp * x44
x63 = S * x60
x64 = S * x59
x65 = B * x64
x66 = 2 * x64
x67 = 2 * xi
x68 = x28 * x67
x69 = x46 * x63
x70 = x39 * x46
x71 = u ^ 8
x72 = B * x28
x73 = 18 * x50
x74 = S * x71
x75 = x59 * xi
x76 = Bp * x34
x77 = 36 * x52
x78 = 4 * xi
x79 = x54 * x78
x80 = x46 * x74
x81 = u ^ 9
x82 = x56 * x81
x83 = x34 * x39
x84 = u ^ 10 * x56
x85 = S * x81 * xi
x86 = x63 * x67
x87 = 12 * x46
x88 = x34 * x59
x89 = 9 * x50
x90 = u ^ 11 * x56
x91 = x34 * x60
x92 = x54 * x82
x93 = x54 * x83
x94 = -Gp
x95 = G * x16
x96 = x94 + x95
x97 = -x96
x98 = x26 * x97
x99 = Bpp * x5
x100 = x5 * x9
x101 = x100 * x36
x102 = 6 * x1 * x5
x103 = 2 * x48
x104 = -x103
x105 = 7 * x3
x106 = 11 * x4
x107 = x104 + x105 + x106 + 5
x108 = 5 * x3
x109 = 9 * x4
x110 = x104 + x108 + x109 + 3
x111 = u * (Bp * (-x102 - x107) + x101 + x17 * (x11 * x5 + x110)) + x99
x112 = x14 * x5
x113 = 2 * Gpp
x114 = x113 * x5
x115 = x0 * x24
x116 = -u * (Bp * (-x102 + x107) + x101 + x17 * (3 * B * x0 * x5 - x110)) + x99
x117 = -x10 * x5 + x11 + 3 * x65 + 3 * x72 * xi
x118 = x103 + x117
x119 = 2 * u
x120 = -S * x119 + Sp
x121 = S_y - x120 * xi_y
x122 = 1 / u
x123 = x122 + x33 + xi
x124 = x123 ^ 2
x125 = G * x119 + x94
x126 = B_y - x24 * xi_y
x127 = G_y - x97 * xi_y
x128 = Bpp + x22 * (B * x119 + x15)
x129 = B_y * x16 - Bp_y + x128 * xi_y
x130 = S_x - x120 * xi_x
x131 = 2 * x130
x132 = Spp - 4 * x32 + 6 * x33
x133 = cosh(x12) ^ 2
x134 = B_x - x24 * xi_x
x135 = x133 * x18
x136 = B_x * x16 - Bp_x + x128 * xi_x
x137 = G_x - x97 * xi_x
x138 = -x21 + x23 + x26
x139 = 2 * Spp
x140 = 6 * x46
x141 = 9 * x52
x142 = 4 * x9
AA[1,1] = x2 * x8
AA[1,2] = 0
BB[1,1] = x20 * x6 * (x19 + 8)
BB[1,2] = -x27 * x29
CC[1,1] = x20 * (-12 * B * S * x61 + 36 * B * x40 + 27 * B * x56 * x71 + 9 * B * x9 - 5 * Bp * u - Bp * x38 * x84 - 18 * Bp * x40 * xi + Bpp * S * x68 + 2 * Bpp * x3 + Bpp * x34 * x9 + Bpp * x45 + Bpp * x56 * x59 + Bpp - 16 * S * x37 + Sp * x37 * x67 + x0 * x36 - 7 * x0 * x76 + x1 * x42 - x10 * x44 + x111 * x112 - x28 * x41 + x28 * x79 + x3 * x30 + x30 * x4 + x30 + x31 - 24 * x32 + 48 * x33 + 15 * x34 * x72 + 4 * x35 + x36 * x66 + x36 * x68 + x36 * x82 + x36 * x83 + x36 * x86 - x37 * x38 - x38 * x59 * x76 - x39 * x41 * xi + x39 * x53 - x39 * x62 + 32 * x4 * xi - x41 * x63 - x42 * x70 - x42 * x80 + x43 * x66 + x43 * x7 - 12 * x47 - x48 * x49 + x50 * x51 + x53 * x90 + x53 * x91 + 4 * x54 * x64 + 2 * x55 - 11 * x56 * x61 + 12 * x57 - 4 * x58 - x62 * x74 + x63 * x79 + 42 * x65 * xi - 24 * x69 + x73 * x74 + x73 * x75 + x73 * x85 + x74 * x77 + x75 * x77 + x77 * x85 + x8 * x98 - x84 * x87 - x87 * x88 + x89 * x90 + x89 * x91 + 2 * x92 + 2 * x93)
CC[1,2] = -x100 * (2 * x112 * x115 * x97 + x114 + x116 * x25 - x119 * (Gp * (x105 + x106 - x118 + 5) + x95 * (-x108 - x109 + x118 - 3)))
SS[1] = x9 * (u * x124 * (-G_y * x22 + 2 * Gp_y + 2 * x0 * x127 * x14 * x24 - x126 * x7 * x97 + x25 * (-x115 * x126 - x129) - xi_y * (12 * u * x125 + x113)) - 2 * x100 * x121 * x27 + x2 * (x119 * x124 * (x0 * x134 * x135 - x0 * x137 * (Gp + x26 - x95) + x133 * x136) + x131 * (x103 - 4 * x4 + 2) - 2 * (2 * x122 + 2 * x33 + x67) * (-S_x * x119 + Sp_x + x0 * x130 * x133 * x24 - x132 * xi_x)))
AA[2,1] = 0
AA[2,2] = x8
BB[2,1] = -x138 * x2 * x29
BB[2,2] = -x6 * x9 * (x19 - 8)
CC[2,1] = x100 * x2 * (2 * x0 * x14 * x24 * x5 * x97 + x111 * x25 - x114 - x119 * (Gp * (-x107 - x117) + x95 * (x110 + x117)))
CC[2,2] = 2 * x9 * (-x0 * x6 * x98 - x116 * x133 * x5 + x139 * x3 + x139 * x4 + x139 - x140 * x84 - x140 * x88 + x141 * x90 + x141 * x91 - x31 * x48 - 12 * x32 + 24 * x33 + 2 * x35 + x4 * x49 - x44 * x70 - x44 * x80 - 6 * x47 + x51 * x52 + x53 * x74 + x53 * x75 + x53 * x85 + x54 * x66 + x54 * x68 + x54 * x86 + x55 + 6 * x57 - 2 * x58 - 12 * x69 + x78 + x92 + x93)
SS[2] = x121 * x142 * (-x45 + x48 + 1) + x123 * x142 * (S_y * x119 - Sp_y + x115 * x121 * x133 + x132 * xi_y) + x123 * x2 * (-x131 * x138 * x39 + x5 * x9 * (-G_x * x22 + 2 * Gp_x + 2 * x0 * x134 * x97 - 2 * x115 * x137 * x14 - x25 * (x0 * x134 * x24 - x136) - 2 * xi_x * (Gpp + x125 * x22))) + x124 * (2 * x126 * x135 * x59 + 2 * x127 * x59 * (x26 + x96) - x129 * x133 * x7)


    nothing
end


function Sd_eq_coeff!(ABCS::Vector, vars::Tuple, ::Inner)
    (
        u, xi, xi_x, xi_y, xi_xx, xi_yy, xi_xy,
        B     ,        G      ,        S      ,    Fx     ,    Fy     ,
        Bp    ,        Gp     ,        Sp     ,    Fxp    ,    Fyp    ,
        Bpp   ,        Gpp    ,        Spp    ,    Fxpp   ,    Fypp   ,
        B_x   ,        G_x    ,        S_x    ,    Fx_x   ,    Fy_x   ,
        B_y   ,        G_y    ,        S_y    ,    Fx_y   ,    Fy_y   ,
        Bp_x  ,        Gp_x   ,        Sp_x   ,    Fxp_x  ,    Fyp_x  ,
        Bp_y  ,        Gp_y   ,        Sp_y   ,    Fxp_y  ,    Fyp_y  ,
        B_xx  ,        G_xx   ,        S_xx   ,
        B_yy  ,        G_yy   ,        S_yy   ,
                        G_xy   ,        S_xy  
    ) = vars

    @tilde_inner("B")
    @tilde_inner("G")
    @tilde_inner("S")
    @tilde_inner("Fx")
    @tilde_inner("Fy")

    @hat_inner("B")
    @hat_inner("G")
    @hat_inner("S")
    @hat_inner("Fx")
    @hat_inner("Fy")

    @bar_inner("B")
    @bar_inner("G")
    @bar_inner("S")

    @star_inner("B")
    @star_inner("G")
    @star_inner("S")

    @tilde_inner("Sp")
    @tilde_inner("Fxp")
    @tilde_inner("Fyp")
    @tilde_inner("Bp")
    @tilde_inner("Sp")
    @tilde_inner("Gp")

    @hat_inner("Sp")
    @hat_inner("Fxp")
    @hat_inner("Fyp")
    @hat_inner("Gp")
    @hat_inner("Bp")
    @hat_inner("Gp")

    @cross_inner("G")
    @cross_inner("S")

x0 = u ^ 3
x1 = S * x0
x2 = u * xi
x3 = x2 + 1
x4 = x1 + x3
x5 = u ^ 2
x6 = B * x0
x7 = exp(x6)
x8 = 8 * x7
x9 = x5 * x8
x10 = x4 ^ 2
x11 = Sp * u
x12 = S * x5
x13 = 4 * Sp
x14 = x13 * x7
x15 = G * x0
x16 = cosh(x15)
x17 = 2 * x16
x18 = u * x17
x19 = S * u
x20 = 24 * x7
x21 = 16 * Sp
x22 = Bs * x17
x23 = x16 * x5
x24 = 2 * x23
x25 = sinh(x15)
x26 = x0 * x25
x27 = 2 * x26
x28 = 4 * x16
x29 = x0 * x28
x30 = Fyp ^ 2
x31 = 6 * B
x32 = u ^ 5
x33 = x16 * x32
x34 = Fyh * x33
x35 = u ^ 4
x36 = x16 * x35
x37 = x36 * xi_yy
x38 = Bh * Fy
x39 = 10 * x33
x40 = Bh * x36
x41 = 2 * Fyp
x42 = u ^ 6
x43 = 4 * x42
x44 = Gh * x25
x45 = Bh * x44
x46 = x28 * x42
x47 = Bh * Sh
x48 = 12 * xi_y
x49 = Fyh * x36
x50 = 2 * Bp
x51 = x0 * xi_yy
x52 = Bp * x17
x53 = S * x46
x54 = x35 * xi
x55 = x28 * x54
x56 = Fy * Fyp
x57 = Fy * x32
x58 = 24 * x33
x59 = Fy * Sh
x60 = 6 * G
x61 = x25 * x60
x62 = Fyh * x32
x63 = 2 * x35
x64 = Gp * x25
x65 = Fyh * x64
x66 = 8 * S
x67 = Fyp * x44
x68 = Fyp * xi_y
x69 = S * x35
x70 = x28 * x69
x71 = 4 * xi
x72 = x23 * x71
x73 = x61 * xi_yy
x74 = x43 * x44
x75 = x44 * x48
x76 = Gs * x25
x77 = S * x43
x78 = 4 * x54
x79 = Sp * x8
x80 = x7 * xi
x81 = 16 * xi_y
x82 = x36 * x81
x83 = x13 * x16
x84 = Bh ^ 2
x85 = 2 * x42
x86 = x16 * x85
x87 = Fy ^ 2
x88 = 3 * x36
x89 = Gh ^ 2
x90 = S ^ 2
x91 = x7 * x90
x92 = S ^ 3
x93 = x7 * x92
x94 = u ^ 7
x95 = 48 * x94
x96 = u ^ 10
x97 = 12 * x7
x98 = x96 * x97
x99 = x16 * x38
x100 = u ^ 8
x101 = 12 * B
x102 = x100 * x101
x103 = x16 * xi_y
x104 = Bh * x103
x105 = x101 * x94
x106 = x42 * x56
x107 = x16 * x31
x108 = Fy * x44
x109 = x16 * x59
x110 = Fy * x42
x111 = 48 * x110
x112 = B * x103
x113 = Fyh * x16
x114 = S * x100
x115 = x101 * x114
x116 = x42 * xi
x117 = x101 * x113
x118 = x31 * x33
x119 = x44 * xi_y
x120 = x16 * xi_yy
x121 = Sh * x103
x122 = xi * xi_yy
x123 = x122 * x33
x124 = 12 * G
x125 = x100 * x25
x126 = x124 * x125
x127 = 32 * x114
x128 = 24 * x116
x129 = S * x94
x130 = Bh * Fyp
x131 = x130 * x28
x132 = x32 * xi
x133 = Bh * x48
x134 = G * x25
x135 = x134 * x94
x136 = u ^ 9
x137 = S * x136
x138 = 8 * x45
x139 = x94 * xi
x140 = x137 * x28
x141 = Bh * xi_y
x142 = S * x16
x143 = x142 * x94
x144 = 32 * x143
x145 = x139 * x28
x146 = x141 * xi
x147 = 2 * Fy
x148 = x147 * xi_y
x149 = Fyh * x129
x150 = Bp * x28
x151 = x150 * xi
x152 = Bp * xi_yy
x153 = 8 * Bpp
x154 = Fy * xi_y
x155 = S * x145
x156 = S * x42
x157 = x156 * x16
x158 = 8 * x56
x159 = x36 * xi
x160 = Fy * x100
x161 = Gh * x16
x162 = x124 * x161
x163 = x148 * x64
x164 = Gpp * x25
x165 = 8 * x164
x166 = x154 * x165
x167 = Fy * x103
x168 = 76 * x156
x169 = 16 * x116
x170 = x13 * x33
x171 = Fy * Spp
x172 = x124 * x25
x173 = Fyh * x114
x174 = x116 * x172
x175 = 4 * x129
x176 = x32 * x71
x177 = x156 * xi
x178 = 12 * x177
x179 = x13 * xi
x180 = x32 * x61
x181 = S * x32
x182 = x181 * x28
x183 = x68 * xi
x184 = x182 * xi
x185 = G * x94
x186 = x161 * x48
x187 = Sh * x48
x188 = x122 * x172
x189 = 4 * x137
x190 = Sh * x44
x191 = x71 * x94
x192 = x64 * xi_yy
x193 = x129 * x71
x194 = Sp * x20
x195 = x33 * xi
x196 = x195 * x81
x197 = 24 * B
x198 = x16 * x197
x199 = x87 * x94
x200 = xi_y ^ 2
x201 = x200 * x32
x202 = Bp * x86
x203 = x32 * x87
x204 = Bpp * x28
x205 = Bpp * x200
x206 = x136 * x90
x207 = xi ^ 2
x208 = x207 * x32
x209 = 24 * x134
x210 = x64 * x87
x211 = 4 * Gpp
x212 = x211 * x25
x213 = 54 * x142
x214 = x42 * x87
x215 = x33 * x87
x216 = 8 * Spp
x217 = 6 * xi
x218 = x100 * x90
x219 = x16 * x218
x220 = 10 * x219
x221 = x207 * x36
x222 = 2 * x221
x223 = x17 * x181
x224 = x0 * x17
x225 = x30 * xi
x226 = x90 * x94
x227 = Fyph * x17
x228 = x0 * x207
x229 = 2 * x206
x230 = 2 * x208
x231 = x207 * x7
x232 = xi ^ 3
x233 = x232 * x7
x234 = xi ^ 4
x235 = x181 * x8
x236 = 24 * x142
x237 = x32 * x90
x238 = x100 * xi
x239 = x194 * x207
x240 = x14 * x35
x241 = x16 * x200
x242 = x216 * x241
x243 = u ^ 11
x244 = S * x243
x245 = x198 * x38
x246 = x136 * xi
x247 = S * x96
x248 = x141 * x198
x249 = x101 * x16
x250 = x249 * x56
x251 = x134 * x154
x252 = 72 * B
x253 = x136 * x252
x254 = x108 * x197
x255 = x101 * x142
x256 = x243 * x255
x257 = Fy * x112
x258 = 156 * x137
x259 = 108 * x257
x260 = x137 * xi
x261 = x16 * x68
x262 = x101 * x116
x263 = x119 * x197
x264 = x96 * xi_y
x265 = x209 * x38
x266 = 36 * x260
x267 = x114 * xi
x268 = x141 * x209
x269 = x96 * xi
x270 = x269 * x66
x271 = x127 * xi
x272 = x150 * x154
x273 = x154 * xi
x274 = Bpp * Fy
x275 = x143 * x81
x276 = x172 * x56
x277 = x139 * x66
x278 = x16 * x277
x279 = Fy * G
x280 = Gh * x236
x281 = x243 * x280
x282 = x172 * x59
x283 = 108 * x251
x284 = x154 * x64
x285 = x164 * x81
x286 = x154 * x83
x287 = x139 * x142
x288 = x172 * x260
x289 = x114 * x71
x290 = Fyp * x114
x291 = x134 * x48
x292 = Fyp * x291
x293 = G * x280
x294 = G * x103
x295 = x134 * x187
x296 = 2 * u
x297 = x25 * x7
x298 = x296 * x297
x299 = 36 * B
x300 = x134 * x87
x301 = x300 * x96
x302 = x16 * x87
x303 = x302 * x96
x304 = B * S
x305 = 84 * x304
x306 = B * x302
x307 = 60 * x238
x308 = x243 * x90
x309 = x113 * x31
x310 = x207 * x94
x311 = x134 * x200
x312 = x299 * x311
x313 = B * x241
x314 = 72 * x114
x315 = x90 * x96
x316 = x120 * x31
x317 = 48 * x313
x318 = x207 * x42
x319 = B ^ 2
x320 = 36 * x319
x321 = x136 * x167
x322 = 22 * x308
x323 = 14 * x310
x324 = x17 * x315
x325 = u ^ 12
x326 = x325 * x90
x327 = 4 * x45
x328 = x100 * x207
x329 = 20 * x315
x330 = x16 * x318
x331 = x28 * xi
x332 = x247 * x331
x333 = Bp * x140
x334 = x199 * xi
x335 = x315 * x52
x336 = x202 * x207
x337 = x52 * xi_yy
x338 = x114 * x302
x339 = x214 * xi
x340 = x16 * x339
x341 = 8 * x205
x342 = x28 * x56
x343 = G ^ 2
x344 = 36 * x343
x345 = x64 * x71
x346 = x165 * x87
x347 = x137 * x83
x348 = 42 * xi
x349 = Fyh * x61
x350 = 2 * x315
x351 = x207 * x85
x352 = S * x86
x353 = 48 * x311
x354 = 8 * x200
x355 = x164 * x354
x356 = x156 * x79
x357 = x325 * xi
x358 = S * x357
x359 = x146 * x244
x360 = 144 * x251
x361 = x304 * x360
x362 = x167 * x269
x363 = x244 * xi
x364 = Fy * x16
x365 = x247 * xi
x366 = Fy * xi
x367 = x325 * x366
x368 = G * xi_y
x369 = 18 * x319
x370 = x100 * x241
x371 = x17 * x84
x372 = exp(2 * x6)
x373 = Fxpt * x372
x374 = 18 * x343
x375 = 21 * x90
x376 = 5 * x318
x377 = x17 * x89
x378 = x91 * x94
x379 = 16 * x378
x380 = x136 * x207
x381 = u ^ 14
x382 = x381 * x90
x383 = x101 * x99
x384 = x207 * x96
x385 = u ^ 13
x386 = x385 * x90
x387 = x101 * x104
x388 = x107 * x56
x389 = x101 * x108
x390 = 60 * x328
x391 = 72 * x304
x392 = x300 * x391
x393 = x243 * x300
x394 = x252 * xi
x395 = x243 * x302
x396 = 96 * xi
x397 = x304 * x396
x398 = x107 * x68
x399 = x311 * x391
x400 = x101 * x119
x401 = 72 * x260
x402 = 72 * x319
x403 = x142 * x325
x404 = x154 * x403
x405 = x172 * x38
x406 = x133 * x134
x407 = Bp * x103 * x147
x408 = x151 * x247
x409 = x153 * x167
x410 = x56 * x61
x411 = Fy * x162
x412 = 72 * x343
x413 = x61 * x68
x414 = G * x186
x415 = 2 * x5
x416 = x297 * x415
x417 = x29 * x7
x418 = Sc * x8
x419 = 60 * x386
x420 = 36 * x380
x421 = x200 * x310
x422 = S * x320
x423 = x302 * x385
x424 = x320 * xi
x425 = x241 * x243
x426 = x136 * x241
x427 = x52 * x87
x428 = x204 * x87
x429 = x200 * x206
x430 = x201 * x207
x431 = S * x344
x432 = x344 * xi
x433 = 2 * x210
x434 = x212 * x87
x435 = u ^ 15
x436 = x435 * x90
x437 = x251 * x252
x438 = x207 * x243
x439 = x381 * xi
x440 = x142 * x273 * x385
x441 = Bb * x372
x442 = Fxt * x372
x443 = Gb * x372
x444 = x29 * x372
x445 = Gt * x7
x446 = Bh * x445
x447 = Gh * x7
x448 = Bt * x447
x449 = x297 * x35
x450 = Fx * Fy
x451 = Fx * x7
x452 = 4 * Fyp
x453 = x26 * x452
x454 = Fx * x32
x455 = 10 * x454
x456 = x16 * x455
x457 = x20 * x25
x458 = Fxh * x7
x459 = x33 * x60
x460 = Gp * x458
x461 = 2 * x36
x462 = x235 * x25
x463 = x240 * x25
x464 = Fy * x7
x465 = 4 * Fxp
x466 = Fxp * x297
x467 = Fxp * x36
x468 = Fxp * xi_y
x469 = x297 * x69
x470 = 4 * x469
x471 = Fxph * x25
x472 = 4 * x80
x473 = x472 * x5
x474 = Fy * x445
x475 = Fypt * x25
x476 = Fyt * x7
x477 = Gp * x476
x478 = x36 * x97
x479 = G * xi_xy
x480 = Gc * x8
x481 = St * x447
x482 = Gp * xi_xy
x483 = Sh * x445
x484 = Gt * xi_y
x485 = x25 * x418
x486 = 16 * xi_xy
x487 = 8 * Sh
x488 = St * x81
x489 = u ^ 16
x490 = x489 * x90
x491 = x299 * x300
x492 = x207 * x325
x493 = x167 * x320
x494 = x422 * xi
x495 = x302 * x381
x496 = x241 * x325
x497 = x167 * x344
x498 = x431 * xi
x499 = Fxp ^ 2 * x372
x500 = x302 * x369
x501 = x241 * x382
x502 = x369 * x96
x503 = x207 * x241
x504 = x36 * x442
x505 = Bt * x372
x506 = 2 * x372
x507 = Gt * x372
x508 = x25 * x507
x509 = x43 * x508
x510 = x372 * x46
x511 = Bt * St
x512 = Fx * Fxp
x513 = St * x16
x514 = x372 * x454
x515 = x25 * x63
x516 = Fxp * x515
x517 = x442 * x64
x518 = x302 * x374
x519 = x374 * x96
x520 = x25 * x443
x521 = Sb * x372
x522 = Fx * x100
x523 = x103 * x94
x524 = x100 * x16
x525 = x28 * x80
x526 = x525 * x94
x527 = Gt * x526
x528 = Bt * x60
x529 = Bt * Gh
x530 = G * x451
x531 = Gp * x451
x532 = Gpp * x8
x533 = x297 * x450
x534 = Fx * x25
x535 = x110 * x534
x536 = x25 * x97
x537 = x16 * x60
x538 = Fyp * x537
x539 = x156 * x8
x540 = Fyp * x534
x541 = x54 * x8
x542 = G * x97
x543 = x522 * x542
x544 = Sh * x16
x545 = x103 * x530
x546 = x16 * x447
x547 = 32 * Fx
x548 = x114 * x547
x549 = x116 * x20
x550 = Fx * x161
x551 = 2 * Fx
x552 = Gp * x551
x553 = x552 * x7
x554 = Fx * x532
x555 = x297 * xi_y
x556 = Fx * x555
x557 = 16 * x80
x558 = x534 * x557
x559 = x25 * xi_y
x560 = x454 * x559
x561 = Spp * x81
x562 = Fx * x561
x563 = x534 * xi_y
x564 = x16 * x542
x565 = Fxh * x114
x566 = x116 * x564
x567 = x129 * x28
x568 = x32 * x525
x569 = Gp * x568
x570 = x14 * x25
x571 = Fxh * x570
x572 = x177 * x536
x573 = Fxp * x537
x574 = Fxp * x25
x575 = Fy * x574
x576 = x181 * x466
x577 = Fxp * x28
x578 = Gh * x80
x579 = x577 * x578
x580 = x181 * x472
x581 = Gt * x134
x582 = x513 * x542
x583 = x16 * x474
x584 = Gt * x364
x585 = x110 * x557
x586 = Fyp * Gt
x587 = Fyt * x564
x588 = Fyt * x570
x589 = x484 * x97
x590 = x20 * x479
x591 = x103 * x185
x592 = Gt * x44
x593 = x137 * x8
x594 = x592 * x8
x595 = x482 * x8
x596 = x484 * x7
x597 = x20 * x484
x598 = x25 * xi_xy
x599 = x25 * x80
x600 = Bt ^ 2
x601 = x372 * x86
x602 = Fx ^ 2 * x372
x603 = Gt ^ 2
x604 = Fxh * x91
x605 = 10 * x125
x606 = Fxh * x231
x607 = 2 * x378
x608 = x231 * x27
x609 = Fyt * x91
x610 = Fyt * x231
x611 = Gc * x28
x612 = x136 * x91
x613 = x231 * x32
x614 = Fx * x102
x615 = x16 * x505
x616 = x372 * x512
x617 = x42 * x616
x618 = x372 * x513
x619 = x16 * x442
x620 = x150 * x442
x621 = Fx * x126
x622 = Fx * x128
x623 = x505 * x577
x624 = Bt * x508
x625 = 8 * x624
x626 = x140 * x372
x627 = x145 * x372
x628 = 8 * x372
x629 = Fx * xi
x630 = Gt * x124
x631 = x16 * x372
x632 = x630 * x631
x633 = St * x372
x634 = Fxp * x508
x635 = x114 * x442
x636 = St * x508
x637 = Fx * x256
x638 = x101 * x136 * x80
x639 = x255 * x96
x640 = Gt * x103
x641 = x640 * x80
x642 = x142 * x243
x643 = Fx * x542 * x642
x644 = x136 * x629
x645 = x247 * x525
x646 = Bt * x542
x647 = Fy * x642
x648 = x142 * x98
x649 = x368 * x648
x650 = x103 * x238
x651 = Fy * x96
x652 = 168 * x142
x653 = G * x450
x654 = 120 * x653
x655 = x16 * x450
x656 = x629 * x94
x657 = Gp * x8
x658 = 16 * x114
x659 = Gpp * x451
x660 = Gpp * x16
x661 = Fx * x660
x662 = x25 * x450
x663 = x662 * x80
x664 = Fy * x25
x665 = Fyp * x629
x666 = x20 * x244
x667 = Fx * x44
x668 = G * x667
x669 = G * x644
x670 = x20 * x44
x671 = 108 * Fx
x672 = 36 * Fx
x673 = x137 * x80
x674 = Fx * x80
x675 = Gp * x674 * xi_y
x676 = x80 * x81
x677 = x14 * x563
x678 = x563 * x80
x679 = Gp * x525
x680 = Fxp * x542
x681 = x364 * x680
x682 = S * x139
x683 = x599 * x77
x684 = x103 * x680
x685 = Fy * x581
x686 = St * x542
x687 = x134 * x597
x688 = x602 * x94
x689 = x17 * x441
x690 = x602 * x64
x691 = x602 * x83
x692 = x499 * xi
x693 = x17 * x373
x694 = x325 * x91
x695 = Gt * x17
x696 = Bh * x695
x697 = x100 * x231
x698 = x17 * x529
x699 = x343 * x672
x700 = x91 * x96
x701 = x231 * x25
x702 = x243 * x91
x703 = 22 * x702
x704 = 14 * Fx
x705 = x310 * x704
x706 = 4 * x231
x707 = x243 * x537
x708 = x310 * x537
x709 = Gp * x17 * x96
x710 = Gp * x86
x711 = x125 * x91
x712 = x231 * x516
x713 = Fxp * Gh
x714 = x231 * x86
x715 = x28 * x482
x716 = Fx * x244
x717 = x198 * x505
x718 = x137 * x616
x719 = Fxp * x629
x720 = x631 * x719
x721 = x197 * x508
x722 = x209 * x505
x723 = x260 * x672
x724 = Fxp * x505
x725 = x372 * x719
x726 = x172 * x725
x727 = G * x236 * x507
x728 = x172 * x633
x729 = Fy * x325
x730 = G * x648
x731 = x325 * x629
x732 = S * x731
x733 = x134 * x602
x734 = x299 * x733
x735 = x16 * x602
x736 = x735 * x96
x737 = B * x735
x738 = x107 * x442
x739 = Fx * x322
x740 = 4 * x624
x741 = x332 * x372
x742 = x442 * x61
x743 = x381 * x91
x744 = x107 * x743
x745 = Fx * Gh
x746 = x231 * x96
x747 = x385 * x91
x748 = x31 * x640
x749 = x136 * x231
x750 = Bh * Fx * x537
x751 = x364 * x528
x752 = x103 * x528
x753 = S * x412
x754 = x385 * x753
x755 = Gp * x28 * x450
x756 = x532 * x655
x757 = x231 * x522
x758 = x207 * x98
x759 = x103 * x702
x760 = x103 * x310
x761 = x103 * x554
x762 = Fxp * x60
x763 = x17 * x372
x764 = x600 * x763
x765 = x603 * x763
x766 = Fx * x101
x767 = x615 * x766
x768 = x107 * x616
x769 = x508 * x766
x770 = x391 * x733
x771 = x243 * x735
x772 = Fx * x382
x773 = x172 * x505
x774 = Fx * x384
x775 = x61 * x616
x776 = x142 * x602
x777 = x385 * x776
x778 = x52 * x602
x779 = 2 * x690
x780 = x699 * x91
x781 = x381 * x776
x782 = x369 * x735
x783 = x374 * x735
x784 = 3 * G
x785 = u * x784
x786 = x25 * x4
x787 = 3 * x6
x788 = x4 * x787
x789 = 2 * x2 + 2
x790 = (G * x2 + G) ^ 2
x791 = 9 * x0
x792 = x343 * x42
x793 = 9 * x792 + 4
x794 = 6 * x3 * (3 * x792 + 2)
x795 = 2 * x1
x796 = Gpp * x4
x797 = x5 * x60
x798 = 4 * Spp * x4
x799 = 9 * x32
x800 = 6 * x15
x801 = u * x207
x802 = x1 * xi
x803 = x792 * xi
x804 = 9 * x343
x805 = 10 * x1 + 6 * x2 + 2 * x788 + 6
x806 = Gp * x4
x807 = 6 * x4 * x6
x808 = 9 * x1 + 5 * x2 + 4
x809 = u * x60
x810 = x551 * xi
x811 = Bp * Fx
x812 = Fx * x5
x813 = Bp * x810
x814 = 2 * Sp
x815 = B * Fx
x816 = x114 * x672
x817 = x319 * x672
x818 = Gt * x60
x819 = Fx * x369
x820 = Fx * x374
ABCS[1] = 0
ABCS[2] = -x4 ^ 3 * x9
ABCS[3] = -x10 * x9 * (-x11 + 3 * x12 + xi)
ABCS[4] = -B * x269 * x360 + Bh * Gt * x645 + Bh * x403 * x542 * x629 + Bh * x451 * x524 * x60 + Bh * x527 + Bh * x564 * x644 + Bh * x643 - Bp * x145 * x602 + Bp * x148 * x33 + Bp * x273 * x46 - Bpp * x267 * x364 * x81 - Bs * x155 - Bs * x53 - Bs * x55 - Bt * Fxp * x207 * x601 - Bt * x467 * x506 + Bt * x509 - Bt * x649 + Fx * Fyp * x137 * x564 + Fx * x169 * x618 + Fx * x243 * x727 - Fx * x255 * x325 * x578 + Fx * x538 * x694 - Fxh * x260 * x564 + Fxh * x416 - Fxh * x462 + Fxh * x463 - Fxh * x566 + Fxh * x569 - Fxh * x572 - Fxp * Fyp * x683 + Fxp * x366 * x730 - Fxp * x41 * x711 - Fxp * x453 * x80 + Fxph * x298 + Fxph * x470 + Fxph * x608 + Fy * Gt * x744 + Fy * x129 * x285 - Fy * x246 * x582 + Fy * x46 * x531 + Fyh * x174 + Fyh * x220 + Fyh * x222 - Fyh * x24 + Fyh * x288 + Fyh * x335 + Fyh * x336 + Fyp * x445 * x567 + Fyp * x695 * x700 - Fyp * x712 - Fyph * x18 - Fyph * x184 - Fyph * x70 - Fyph * x72 + Fypt * x298 + Fypt * x470 + Fypt * x608 + Fyt * x114 * x679 + Fyt * x416 - Fyt * x462 + Fyt * x463 - Fyt * x566 + Fyt * x569 - Fyt * x572 - G * x264 * x652 * x674 - G * x670 * x732 - Gc * x417 - Gh * St * x526 + 24 * Gh * x238 * x294 - Gp * x27 * xi_yy + Gp * x593 * x655 + Gs * x27 + Gt * x107 * x231 * x651 + Gt * x255 * x729 * x80 + Gt * x290 * x525 - Gt * x315 * x506 * x574 - S ^ 4 * x98 - S * x105 * x120 - S * x20 * x367 * x581 + 84 * S * x301 + S * x393 * x396 + Sb * x444 - Sh ^ 2 * x46 + Sh * x196 - Sh * x255 * x264 - Sh * x42 * x558 - Sh * x454 * x457 - Sh * x527 - Sh * x643 + Sh * x74 + Sh * x82 - Spp * x110 * x558 - Spp * x533 * x658 + Ss * x29 + Ss * x53 + Ss * x55 - St ^ 2 * x510 - St * x25 * x585 + St * x297 * x42 * x487 - St * x457 * x57 + St * x509 - St * x591 * x97 - St * x649 + x0 * x21 * x233 - x0 * x22 + x0 * x242 - x0 * x4 * x506 * xi_xx * (x16 * (-3 * B * u * x4 + Bp * x4 + 2 * Sp - 4 * x19) + x786 * (Gp - x785)) - 96 * x1 * x231 + x1 * x79 + x100 * x107 * x474 - x100 * x312 - x100 * x592 * x706 - x101 * x109 * x246 - x101 * x121 * x238 - x101 * x123 + x101 * x260 * x619 + x101 * x618 * x644 - x102 * x108 - x102 * x109 + x102 * x641 + x102 * x99 + x104 * x105 - x104 * x271 - x104 * x329 - x105 * x119 - x105 * x121 - x105 * x720 + x106 * x107 - x106 * x61 - x107 * x447 * x522 - x107 * x617 - x107 * x745 * x746 + x108 * x127 + x108 * x128 + x108 * x266 + x108 * x322 + x108 * x323 + x109 * x169 + x110 * x573 * x7 - x111 * x112 + x111 * x134 * xi_y - x113 * x115 + x113 * x178 + x114 * x188 + x114 * x272 + x114 * x28 * x531 * xi_y - 4 * x114 * x284 + x114 * x285 * x366 - x114 * x286 - x114 * x331 * x724 + x114 * x346 + x114 * x348 * x735 + x114 * x579 - x114 * x587 - x114 * x661 * x676 - 84 * x114 * x663 + x114 * x677 + x114 * x684 - x115 * x120 * xi + x115 * x261 + x115 * x619 - x116 * x117 - x116 * x286 - x116 * x292 - x116 * x317 + x116 * x353 + x116 * x677 + x116 * x684 - x117 * x260 + x118 * x442 + x118 * x68 + 32 * x119 * x129 + 24 * x119 * x132 + x119 * x271 + x119 * x329 - 80 * x12 * x80 + 8 * x120 * x226 + x123 * x66 - x124 * x16 * x700 * xi_xy - x124 * x667 * x743 - x126 * x38 + x126 * x59 - x127 * x583 - x127 * x641 - x127 * x99 - x128 * x99 + x129 * x131 + x129 * x172 * xi_yy + x129 * x25 * x665 * x8 - x129 * x297 * x562 - x129 * x442 * x83 + x129 * x447 * x577 - 108 * x129 * x533 + x129 * x571 + x129 * x588 - x129 * x620 - x129 * x623 - 64 * x129 * x678 - x13 * x49 - x13 * x504 + x130 * x207 * x86 + x130 * x324 + x131 * x132 + x131 * x267 + x132 * x571 + x132 * x588 - x132 * x620 - x132 * x623 - x133 * x135 - x133 * x330 - x134 * x380 * x589 + x135 * x187 - x135 * x589 - x136 * x555 * x699 - x137 * x138 - x137 * x154 * x345 + x137 * x250 - x137 * x276 - x137 * x450 * x557 * x660 + x137 * x625 + x137 * x662 * x79 + x137 * x681 - x138 * x139 + x139 * x250 - x139 * x259 - x139 * x276 + x139 * x283 - x139 * x594 + x139 * x625 + x139 * x681 - x139 * x691 + x14 * x207 * x218 + x14 * x42 * x90 + x14 * x560 + x14 + x140 * x446 - x140 * x448 - x140 * x47 - x140 * x481 - x140 * x483 + x140 * x675 + x140 * x84 + x140 * x89 - x141 * x144 + x142 * x629 * x651 * x657 - x143 * x590 - x144 * x596 - x145 * x47 + x145 * x84 + x145 * x89 - x146 * x58 + x149 * x150 - x149 * x83 + x150 * x334 + x151 * x173 + x151 * x62 - x151 * x635 + x152 * x155 + x152 * x53 + x152 * x55 - x153 * x154 * x36 - x153 * x260 * x302 - x153 * x338 - x153 * x340 - x154 * x170 + x154 * x208 * x28 + 64 * x154 * x287 + x154 * x55 + x155 * x441 + x156 * x242 + x156 * x355 - x156 * x485 - x156 * x83 * xi_yy - x157 * x158 - x157 * x341 - x157 * x480 - x157 * x512 * x628 + x157 * x595 - x158 * x159 + x159 * x200 * x216 - x159 * x341 - x159 * x480 + x159 * x595 + x16 * x185 * x665 * x97 - x16 * x267 * x590 + 24 * x16 * x507 * x669 - 72 * x16 * x653 * x749 - x16 * x654 * x747 + x160 * x162 + x160 * x231 * x573 - x160 * x581 * x97 - x160 * x582 + 24 * x161 * x246 * x279 - x161 * x672 * x673 - x163 * x308 - x163 * x310 - x163 * x32 + x164 * x200 * x277 + x165 * x339 + x166 * x315 + x166 * x318 + x166 * x35 + x167 * x168 + 28 * x167 * x206 - x168 * x556 - x17 * x218 * x68 + x17 * x700 * x713 - x170 * x442 * xi + x171 * x196 + x171 * x275 - 16 * x171 * x297 * x454 + x171 * x82 + x172 * x173 + x172 * x635 - x172 * x718 + x174 * x442 - x175 * x517 - x175 * x634 - x175 * x65 - x175 * x67 - x176 * x517 - x176 * x634 - x176 * x65 - x176 * x67 + 24 * x177 * x241 + x178 * x619 - x179 * x34 - x179 * x37 - x18 * x373 + x180 * x442 - x180 * x68 + x181 * x239 - x181 * x486 * x599 - x182 * x68 - x183 * x29 - x183 * x53 - x184 * x373 + x185 * x186 + x188 * x32 + x189 * x190 - x189 * x210 + x189 * x636 - x189 * x690 - x19 * x20 + x190 * x191 + x191 * x636 - x192 * x193 - x192 * x229 - x192 * x230 - x192 * x77 - x192 * x78 + x193 * x520 + x193 * x76 + x194 * x69 * xi - x195 * x590 - x195 * x597 - x196 * x274 - x198 * x199 - x198 * x201 + x198 * x359 - x198 * x421 + x198 * x688 + x199 * x209 + x199 * x213 - x199 * x345 + x2 * x21 * x7 - x20 * x246 * x685 + x200 * x211 * x26 + x201 * x209 + x201 * x236 - x202 * x602 + x202 * x87 - x203 * x204 + x203 * x212 - x204 * x429 - x204 * x430 - x205 * x278 - x205 * x29 - x206 * x22 - x206 * x28 * x616 + x206 * x337 - x206 * x342 + x206 * x689 - x207 * x514 * x577 - x208 * x22 + x208 * x337 - x208 * x342 + x208 * x689 - x209 * x359 + x209 * x421 + x209 * x688 - x210 * x247 * x71 - x210 * x85 + x212 * x429 + x212 * x430 + x213 * x688 - x214 * x83 + x215 * x216 + x215 * x217 + x216 * x338 + x216 * x340 + x217 * x33 * x602 + x219 * x30 + x219 * x354 + x219 * x499 + x220 * x442 + x221 * x30 + x221 * x499 + x222 * x442 - x222 * x68 + x223 * x30 + x223 * x499 + x224 * x225 + x224 * x441 + x224 * x692 + x225 * x352 - x226 * x227 - x226 * x693 + x226 * x79 * xi - x227 * x228 - x228 * x693 + x229 * x520 + x229 * x76 + x23 * x30 + x23 * x499 + x230 * x520 + x230 * x76 - x231 * x243 * x559 * x699 - 10 * x231 * x535 + x232 * x356 - x232 * x379 - 48 * x233 * x69 - x234 * x235 + x234 * x240 - 136 * x237 * x80 + x238 * x248 - x238 * x263 - x238 * x268 + x238 * x295 - x238 * x687 - 56 * x238 * x93 + x239 * x5 - x24 * x442 - x24 * x68 + x243 * x394 * x733 - x243 * x399 - x243 * x412 * x663 + x244 * x245 - x244 * x254 - x244 * x265 + x244 * x282 + x244 * x396 * x733 + x245 * x246 + x245 * x358 - x246 * x254 - x246 * x265 + x246 * x282 - x246 * x364 * x646 + x247 * x248 - x247 * x263 - x247 * x268 + x247 * x295 - x247 * x345 * x602 - x247 * x687 - x247 * x726 + 84 * x247 * x733 + x249 * x260 * x68 - x249 * x718 - x251 * x253 + x251 * x258 + 168 * x251 * x365 + x251 * x390 - x253 * x311 * xi - x254 * x358 + x255 * x269 * x56 + x256 * x474 + x256 * x484 * x80 - x256 * x59 - x257 * x258 - x257 * x390 - x258 * x545 - x259 * x326 - x26 * x418 + x26 * x464 * x465 + x26 * x468 * x472 + x26 * x79 * xi_xy + x260 * x272 - x260 * x292 + x260 * x346 - x260 * x587 + x260 * x684 + x261 * x262 + x262 * x619 - x263 * x363 + x264 * x293 - x265 * x358 - x266 * x99 + x27 * x443 - x270 * x45 + x270 * x624 - x274 * x275 - x275 * x659 - x276 * x365 - x278 * x56 + x279 * x281 + x281 * x368 * xi + x283 * x326 - x284 * x43 * xi + x285 * x57 * xi - x287 * x480 + x287 * x595 + x288 * x442 - x289 * x634 - x289 * x65 - x289 * x67 - x29 * x56 - x290 * x291 + x293 * x367 - x294 * x671 * x694 - 60 * x294 * x757 - x297 * x651 * x699 - x299 * x301 + x299 * x380 * x735 + x300 * x307 + x300 * x419 + x300 * x420 + x302 * x376 - x303 * x305 + x303 * x369 + x303 * x374 + x303 * x375 - 168 * x304 * x362 + x305 * x736 - x306 * x307 - x306 * x419 - x306 * x420 + x307 * x733 + x307 * x737 - x308 * x309 - x308 * x317 + x308 * x349 + x308 * x353 + x308 * x398 + x308 * x407 - x308 * x413 - x308 * x428 + x308 * x434 + x308 * x738 + x308 * x742 - x308 * x756 - x309 * x310 - x31 * x34 - x31 * x37 + x31 * x445 * x523 + x310 * x349 + x310 * x398 + x310 * x407 - x310 * x413 - x310 * x428 + x310 * x434 + x310 * x738 + x310 * x742 - x310 * x756 + x311 * x314 + x311 * x401 - x312 * x382 - x312 * x384 - x313 * x314 - x313 * x401 - x315 * x316 - x315 * x409 + x315 * x73 - x315 * x761 - x316 * x318 - x318 * x409 - x318 * x640 * x97 + x318 * x73 + x318 * x75 - x318 * x761 - 92 * x318 * x91 - x32 * x488 * x599 + x32 * x506 * xi_x ^ 2 * (x16 * (S * x794 + x0 * x793 * x90 + x10 * x319 * x791 + x101 * (3 * x1 * x3 + x3 ^ 2 + x85 * x90) + x790 * x791) + x60 * x786 * (4 * x1 + x788 + x789)) + x32 * x579 + x320 * x321 + x320 * x777 + x321 * x344 - x322 * x99 - x323 * x583 - x323 * x99 - x324 * x724 - x325 * x361 - x325 * x556 * x753 - x326 * x327 + x326 * x371 + x326 * x377 + x326 * x388 - x326 * x410 + x326 * x427 - x326 * x433 + x326 * x740 + x326 * x764 + x326 * x765 - x326 * x768 - x326 * x775 - x326 * x778 - x326 * x779 - x327 * x328 + x328 * x371 + x328 * x377 + x328 * x388 - x328 * x410 + x328 * x427 - x328 * x433 + x328 * x740 + x328 * x764 + x328 * x765 - x328 * x768 - x328 * x775 - x328 * x778 - x328 * x779 + x33 * x442 * x66 + x33 * x553 * xi_y - x330 * x479 * x97 + x332 * x84 + x332 * x89 - x333 * x602 + x333 * x87 - x334 * x83 - x335 * x442 - x336 * x442 + x338 * x348 + x34 * x66 + x344 * x777 - x345 * x635 - x345 * x688 - x347 * x602 - x347 * x87 - x35 * x472 * x563 + x35 * x73 + x35 * x75 - 60 * x35 * x91 - x350 * x517 - x350 * x65 - x350 * x67 - x351 * x517 - x351 * x634 - x351 * x65 - x351 * x67 + x352 * x692 + x355 * x54 + x356 * x598 - x357 * x399 + x36 * x41 * x445 - x36 * x554 * xi_y - x361 * x385 * xi + x362 * x402 + x362 * x412 - x363 * x687 - x364 * x454 * x532 - x364 * x530 * x95 + x364 * x656 * x657 - x364 * x658 * x659 + x364 * x694 * x762 - x365 * x594 - x366 * x403 * x646 - x366 * x454 * x536 + x369 * x370 + x369 * x501 + x37 * x66 + x370 * x374 - x373 * x70 - x373 * x72 + x374 * x501 + x375 * x736 + x376 * x735 - x379 * x598 - x38 * x39 + x380 * x387 - x380 * x400 - x380 * x406 + x380 * x414 - x380 * x8 * x92 - x381 * x663 * x753 + x382 * x383 - x382 * x389 - x382 * x405 + x382 * x411 + x382 * x767 + x382 * x769 + x383 * x384 - x384 * x389 - x384 * x405 + x384 * x411 + x384 * x767 + x384 * x769 - x385 * x392 + x385 * x770 + x386 * x387 - x386 * x400 - x386 * x406 + x386 * x414 - x39 * x474 - x392 * x439 - x393 * x394 - x395 * x397 + x395 * x424 + x395 * x432 + x397 * x771 + x40 * x41 - x40 * x48 + x402 * x404 + x402 * x440 + x404 * x412 - x408 * x602 + x408 * x87 - x41 * x466 * x5 + x412 * x440 - x412 * x678 * x96 + x415 * x7 * xi_x * (x16 * (-x4 * x5 * (Fy * (u * (-x806 + x808 * x809) + 4 * x796) + Gh * (10 * x1 + 6 * x2 + x788 + 6) - x785 * (Fyp * x4 + x5 * (Bh * x1 + Bh * x2 + Bh - 2 * Sh))) + x7 * (-Fxp * x10 * (x787 + 1) + x5 * (-Bp * x551 * x69 + Bt * x4 * x805 + 38 * Fx * x12 - Fx * x69 * x814 + Gt * x800 + St * (8 * x2 + x807 + 8) - u * x811 - x11 * x551 + x116 * x817 + x156 * x630 + 84 * x177 * x815 - x181 * x813 + x197 * x812 + x206 * x818 + 30 * x207 * x35 * x815 + x208 * x818 + 54 * x218 * x815 - x226 * x811 - x228 * x811 + x237 * x704 + x260 * x699 + x260 * x817 + 78 * x304 * x454 + x308 * x819 + x308 * x820 + x310 * x819 + x310 * x820 + x319 * x816 + x343 * x816 + x369 * x454 + x374 * x454 - x5 * x813 + x54 * x630 + x547 * x802 + x551 * x801 + 54 * x6 * x629 + x630 * x682 + x672 * x803 + x810 - x812 * x814 * xi))) + x25 * (Fyp * x10 + x5 * (-Gh * x10 * x800 - x147 * (-x11 * x4 + x114 * x374 + 19 * x12 + 7 * x237 + x260 * x374 + x308 * x804 + x310 * x804 + x343 * x799 + x798 + x801 + 16 * x802 + 18 * x803 + xi) - x3 * x487 + x4 * x7 * (Gt * x805 + u * (-Fx * x806 + Fx * x809 * (x807 + x808) - Fxp * x4 * x784 + x797 * (Bt * x1 + Bt * x2 + Bt + St))))) - x296 * xi_y * (x16 * (x789 + x795) * (x796 + x797 * (x3 + x795)) + x25 * (x12 * x794 + x237 * x793 + x790 * x799 + x798))) + x416 * x468 + x417 * x482 + x419 * x733 + x419 * x737 + x42 * x451 * x538 - 48 * x42 * x545 - x42 * x691 + x420 * x733 + x422 * x423 + x422 * x425 + x423 * x431 + x424 * x426 + x424 * x771 + x424 * x781 + x425 * x431 + x426 * x432 - x43 * x45 + x432 * x771 + x432 * x781 - x435 * x559 * x780 - x436 * x437 + x436 * x493 + x436 * x497 - x437 * x438 + x438 * x493 + x438 * x497 + x439 * x770 - x44 * x543 + 10 * x44 * x57 + x441 * x53 + x441 * x55 - x444 * x512 - x445 * x74 + x446 * x86 - x447 * x456 + 2 * x447 * x467 - x447 * x637 - x448 * x86 + 6 * x449 * x450 - x449 * x488 - x449 * x562 + x451 * x453 + x452 * x454 * x701 + x452 * x534 * x612 - x452 * x576 - x454 * x561 * x599 - x454 * x660 * x676 + x455 * x508 + x456 * x505 - x458 * x459 - x458 * x708 + x459 * x468 * x7 - x459 * x476 - x46 * x47 - x46 * x481 - x46 * x483 + x46 * x675 + x460 * x461 + x460 * x567 + x461 * x477 - x464 * x524 * x528 + x465 * x57 * x701 + x465 * x612 * x664 - x467 * x628 * x629 + x468 * x683 + 2 * x468 * x711 - x469 * x486 + x471 * x473 + x471 * x580 + x471 * x607 + x473 * x475 + x475 * x580 + x475 * x607 - x476 * x708 + x477 * x567 - x478 * x479 - x478 * x484 - x48 * x581 * x747 - x485 * x54 - x489 * x664 * x780 + x49 * x50 - x490 * x491 + x490 * x500 + x490 * x518 + x490 * x734 + x490 * x782 + x490 * x783 - x491 * x492 + x492 * x500 + x492 * x518 + x492 * x734 + x492 * x782 + x492 * x783 + x494 * x495 + x494 * x496 + x495 * x498 + x496 * x498 - x50 * x504 + x502 * x503 + x502 * x735 + x503 * x519 + x505 * x621 - x507 * x516 + x508 * x548 + x508 * x614 + x508 * x622 + x508 * x705 + x508 * x723 + x508 * x739 + x51 * x52 - x51 * x83 + x510 * x511 + x511 * x626 + x511 * x627 + 24 * x513 * x514 - x515 * x606 - x515 * x610 - x517 * x63 + x519 * x735 + x520 * x77 + x520 * x78 + x521 * x53 + x521 * x55 + x522 * x632 - x523 * x528 * x7 - x524 * x654 * x80 - x526 * x529 - x529 * x645 - x530 * x651 * x652 - x533 * x754 + x535 * x79 + x538 * x757 + x539 * x540 + x539 * x575 + x54 * x598 * x79 + x540 * x541 + x541 * x575 - x542 * x544 * x644 - x543 * x544 - x546 * x548 - x546 * x705 + x548 * x615 - x549 * x550 - x549 * x584 - x550 * x638 - x550 * x703 + x552 * x759 + x553 * x760 - x560 * x706 - 28 * x563 * x612 - x564 * x565 + x565 * x679 + x568 * x586 + x575 * x682 * x8 + 4 * x576 * xi_y + x58 * x59 + x584 * x638 - 36 * x584 * x673 - x584 * x703 - x585 * x661 + x586 * x714 - x591 * x671 * x80 - x592 * x593 - 4 * x592 * x694 + x596 * x639 + x600 * x601 + x600 * x626 + x600 * x627 + x600 * x741 + x601 * x603 - x602 * x88 + x603 * x626 + x603 * x627 + x603 * x741 - x604 * x605 - x604 * x707 + x604 * x709 - x605 * x609 + x606 * x710 - x609 * x707 + x609 * x709 - x61 * x617 + x61 * x62 + x610 * x710 - x611 * x612 - x611 * x613 + x612 * x715 + x613 * x715 + x614 * x615 + x614 * x618 + x615 * x622 + x615 * x705 + x615 * x723 + x615 * x739 + x621 * x633 - x63 * x65 - x63 * x67 - x630 * x664 * x743 + x632 * x772 + x632 * x774 + x633 * x637 - x639 * x725 - 20 * x640 * x700 - x642 * x646 * xi * xi_y - 192 * x642 * x653 * x80 + x644 * x717 + x644 * x721 + x644 * x722 + x644 * x728 - x646 * x647 - x646 * x650 - x647 * x686 - x650 * x686 + x656 * x664 * x79 - x66 * x720 * x94 - 42 * x662 * x700 + x665 * x730 - x666 * x668 - x666 * x685 - x668 * x758 - x669 * x670 - x678 * x754 - x685 * x758 - x690 * x85 + x694 * x696 - x694 * x698 + x694 * x755 + x696 * x697 - x697 * x698 + x697 * x755 - x699 * x701 * x729 + x7 * x760 * x762 + x712 * xi_y + x713 * x714 + x716 * x717 + x716 * x721 + x716 * x722 + x716 * x728 + x717 * x732 + x721 * x732 + x722 * x732 - x726 * x94 + x727 * x731 + x734 * x96 + x743 * x750 - x743 * x751 - x744 * x745 + x746 * x750 - x746 * x751 + x747 * x748 - x747 * x752 + x748 * x749 - x749 * x752 + x759 * x762 + x76 * x77 + x76 * x78 + x772 * x773 + x773 * x774 + x84 * x86 + x86 * x89 - x87 * x88 - x93 * x95
    

    nothing
end




# this is another coupled equation, for Bd and Gd. the notation used is
#
# ( A11 d_uu Bd + A12 d_uu Gd + B d_u Bd + B2 d_u Gd + C11 Bd + C12 Gd ) = -S1
# ( A21 d_uu Bd + A22 d_uu Gd + B21 d_u Bd + B22 d_u Gd + C21 Bd + C22 Gd ) = -S2

function BdGd_eq_coeff!(AA::Matrix, BB::Matrix, CC::Matrix, SS::Vector, vars::Tuple, ::Inner)
    (
        u, xi, xi_x, xi_y, xi_xx, xi_yy, xi_xy,
        B     ,       G      ,        S      ,    Fx     ,    Fy     ,  Sd,
        Bp    ,       Gp     ,        Sp     ,    Fxp    ,    Fyp    ,
        Bpp   ,       Gpp    ,        Spp    ,    Fxpp   ,    Fypp   ,
        B_x   ,       G_x    ,        S_x    ,    Fx_x   ,    Fy_x   ,
        B_y   ,       G_y    ,        S_y    ,    Fx_y   ,    Fy_y   ,
        Bp_x  ,       Gp_x   ,        Sp_x   ,    Fxp_x  ,    Fyp_x  ,
        Bp_y  ,       Gp_y   ,        Sp_y   ,    Fxp_y  ,    Fyp_y  ,
        B_xx  ,       G_xx   ,        S_xx   ,
        B_yy  ,       G_yy   ,        S_yy   ,
                       G_xy   ,        S_xy
    ) = vars

    @tilde_inner("B")
    @tilde_inner("G")
    @tilde_inner("S")
    @tilde_inner("Fx")
    @tilde_inner("Fy")

    @hat_inner("B")
    @hat_inner("G")
    @hat_inner("S")
    @hat_inner("Fx")
    @hat_inner("Fy")

    @bar_inner("B")
    @bar_inner("G")
    @bar_inner("S")

    @star_inner("B")
    @star_inner("G")
    @star_inner("S")

    @tilde_inner("Fxp")
    @tilde_inner("Fyp")

    @hat_inner("Fxp")
    @hat_inner("Fyp")

    @cross_inner("G")
    @cross_inner("S")

   

   x0 = u ^ 3
x1 = B * x0
x2 = exp(x1)
x3 = 8 * x2
x4 = u ^ 2
x5 = S * x0
x6 = u * xi
x7 = x6 + 1
x8 = x5 + x7
x9 = x8 ^ 3
x10 = x4 * x9
x11 = x8 ^ 2
x12 = G * x0
x13 = tanh(x12)
x14 = 3 * u
x15 = G * x14
x16 = -Sp * x4 + 4 * x5 + 2 * x6 + 1
x17 = x9 * (B * x14 - Bp)
x18 = sech(x12)
x19 = -Fyp
x20 = Fy * u
x21 = x19 + x20
x22 = Sh * u
x23 = 2 * x4
x24 = S * x23
x25 = x24 * xi_y
x26 = 2 * x5
x27 = x26 - 1
x28 = x0 * (Fy * x27 + x22 + x25)
x29 = 2 * x0
x30 = x11 * x2
x31 = x30 * (Sd * x29 + x7 ^ 2)
x32 = u * xi_y
x33 = 5 * x4
x34 = x8 * (-2 * Fyph + u * (Fy ^ 2 * x33 + 2 * Fyh + Fyp ^ 2 - 4 * Fyp * x20) - 2 * x32 * (-x19 - 2 * x20))
x35 = 2 * u
x36 = x18 * x35
x37 = -Fxp
x38 = Fx * u
x39 = x37 + x38
x40 = St * u
x41 = x24 * xi_x
x42 = 2 * x38
x43 = u * xi_x
x44 = (4 * x39 * x4 * (Fx * x27 + x40 + x41) - x8 * (-2 * Fxpt + u * (Fx ^ 2 * x33 + Fxp ^ 2 - 4 * Fxp * x38 + 2 * Fxt) - 2 * x43 * (-x37 - x42))) * exp(2 * x1)
x45 = u ^ 4
x46 = Fxh * u
x47 = 3 * G
x48 = Fyt * u
x49 = Fx * Fyp
x50 = x4 * x47
x51 = Fxp * Fy
x52 = 4 * x2
x53 = sinh(x12)
x54 = u * x53
x55 = Fx * x45
x56 = cosh(x12)
x57 = Bp * x0
x58 = 3 * B
x59 = x45 * x58
x60 = u ^ 5 * x58
x61 = 3 * x1
AA[1,1] = 0
AA[1,2] = 0
BB[1,1] = -x10 * x3
BB[1,2] = 0
CC[1,1] = -u * x11 * x3 * (x13 * x4 * x8 * (-Gp + x15) + x16)
CC[1,2] = -x0 * x13 * x17 * x3
SS[1] = -8 * x18 * x21 * x28 + x18 * x45 * x52 * x8 * (-Fxh * Gp + Fxp * Gh - Fyp * Gt + Fyt * Gp - Gh * x38 + Gt * x20 + x32 * (-Fx * Gp + 3 * Fxp * G) + x46 * x47 - x47 * x48 - x49 * x50 + x50 * x51 + xi_x * (-Fyp * x15 + Gp * x20)) - x31 * (12 * B * u - 4 * Bp) + x34 * x36 + x36 * x44
AA[2,1] = 0
AA[2,2] = 0
BB[2,1] = 0
BB[2,2] = -x10 * x52
CC[2,1] = x17 * x2 * x29 * sinh(2 * x12)
CC[2,2] = -4 * u * x16 * x30
SS[2] = -x0 * x52 * x56 * (Fx * Sh * x4 - Fxp * x22 + 4 * Fy * S * x55 + Fy * St * x4 - Fy * x42 - Fyp * x40 + x21 * x41 + x25 * x39 - x26 * x49 - x26 * x51 + x49 + x51) + x2 * x35 * x56 * x8 * (-Bh * Fxp * x0 + Bh * x55 - Bt * Fy * x45 + Bt * Fyp * x0 + 5 * Fx * Fy * x0 + Fxh * x57 - Fxh * x59 + Fxp * Fyp * u - Fxph - Fypt - Fyt * x57 + Fyt * x59 - x23 * x49 - x23 * x51 + x32 * (Bp * Fx * x0 - Fxp * x61 - Fxp + x42) - x43 * (-Fyp * x61 + Fyp + x20 * (Bp * x4 - 2)) + x46 + x48 + x49 * x60 - x51 * x60) + 4 * x21 * x28 * x53 + x31 * (-6 * G * u + 2 * Gp) - x34 * x54 + x44 * x54

    
    nothing
end



function A_eq_coeff!(ABCS::Vector, vars::Tuple, ::Inner)
    (
         u, xi, xi_x, xi_y, xi_xx, xi_yy, xi_xy,
        B   ,  G   ,  S    , Fx    , Fy    , Sd, Bd, Gd,
        Bp  ,  Gp  ,  Sp   , Fxp   , Fyp   ,
        Bpp ,  Gpp ,  Spp  , Fxpp  , Fypp  ,
        B_x ,  G_x ,  S_x  , Fx_x  , Fy_x  ,
        B_y ,  G_y ,  S_y  , Fx_y  , Fy_y  ,
        Bp_x,  Gp_x,  Sp_x , Fxp_x , Fyp_x ,
        Bp_y,  Gp_y,  Sp_y , Fxp_y , Fyp_y ,
        B_xx,  G_xx,  S_xx ,
        B_yy,  G_yy,  S_yy ,
                G_xy,  S_xy
    ) = vars

    @tilde_inner("B")
    @tilde_inner("G")
    @tilde_inner("S")
    @tilde_inner("Fx")
    @tilde_inner("Fy")

    @hat_inner("B")
    @hat_inner("G")
    @hat_inner("S")
    @hat_inner("Fx")
    @hat_inner("Fy")

    @bar_inner("B")
    @bar_inner("G")
    @bar_inner("S")

    @star_inner("B")
    @star_inner("G")
    @star_inner("S")

    @tilde_inner("Fxp")
    @tilde_inner("Fyp")

    @hat_inner("Fxp")
    @hat_inner("Fyp")

    @cross_inner("G")
    @cross_inner("S")


  x0 = u ^ 3
x1 = B * x0
x2 = exp(x1)
x3 = S * x0
x4 = u * xi
x5 = x4 + 1
x6 = x3 + x5
x7 = x6 ^ 4
x8 = x2 * x7
x9 = 2 * x0
x10 = u ^ 2
x11 = 4 * x2
x12 = Sp * x11
x13 = Sd * x2
x14 = 8 * x13
x15 = 16 * Sp * x2
x16 = G * x0
x17 = cosh(x16)
x18 = sinh(x16)
x19 = Gs * x18
x20 = 4 * x17
x21 = Ss * x20
x22 = u ^ 5
x23 = u ^ 4
x24 = u ^ 6
x25 = x17 * x23
x26 = 2 * Bp * Fyh
x27 = x17 * x9
x28 = Bp * xi_yy
x29 = x0 * x17
x30 = 2 * Fy
x31 = Fyp * x30
x32 = 8 * x22
x33 = Gh * x18
x34 = Fy * x33
x35 = 24 * x22
x36 = Fy * x17
x37 = 6 * G
x38 = x18 * x37
x39 = Fyh * x22
x40 = S * x20
x41 = x2 * x23
x42 = Gd * x37
x43 = x38 * xi_yy
x44 = 4 * x24
x45 = 12 * xi_y
x46 = x33 * x45
x47 = S * x24
x48 = 4 * x19
x49 = x23 * xi
x50 = 8 * x2
x51 = Sp * x50
x52 = 8 * xi_yy
x53 = x0 * x14
x54 = 16 * x13
x55 = x25 * xi_y
x56 = 16 * Sh
x57 = Bh ^ 2
x58 = x17 * x24
x59 = 2 * x58
x60 = Fy ^ 2
x61 = Fyp ^ 2
x62 = Gh ^ 2
x63 = S ^ 2
x64 = S ^ 3
x65 = u ^ 7
x66 = S ^ 4
x67 = u ^ 10
x68 = 12 * B
x69 = Bh * x68
x70 = u ^ 8
x71 = x17 * x70
x72 = Fy * x71
x73 = x17 * xi_y
x74 = x65 * x73
x75 = u ^ 9
x76 = Bp * x73
x77 = Bp * Fyh
x78 = x20 * x24
x79 = S * x78
x80 = x20 * x49
x81 = Fy * Fyp
x82 = G * Gh
x83 = 12 * x82
x84 = Fy * Sh
x85 = G * x18
x86 = 12 * x85
x87 = x70 * x86
x88 = x24 * x85
x89 = Fy * xi_y
x90 = S * x70
x91 = 28 * x90
x92 = 20 * x34
x93 = x24 * xi
x94 = Gpp * x18
x95 = 8 * x94
x96 = x89 * x95
x97 = S * x58
x98 = x58 * xi
x99 = 16 * Spp
x100 = x86 * x90
x101 = Fyh * xi
x102 = 12 * x88
x103 = 8 * x97
x104 = 24 * x2
x105 = x104 * x65
x106 = G * Gd
x107 = x105 * x106
x108 = x22 * xi
x109 = x104 * x106
x110 = x17 * x65
x111 = x45 * x82
x112 = S * x65
x113 = x86 * xi_yy
x114 = x65 * x85
x115 = 4 * x33
x116 = S * x75
x117 = x33 * xi_y
x118 = 32 * x117
x119 = x65 * xi
x120 = S * x119
x121 = Sp * x54
x122 = S * x49
x123 = Sp * x104
x124 = S * x17
x125 = xi_y ^ 2
x126 = x116 * x20
x127 = x119 * x20
x128 = Bp * x60
x129 = xi ^ 2
x130 = x60 * x65
x131 = Gpp * x22
x132 = x18 * x60
x133 = 4 * x132
x134 = 42 * x124
x135 = x17 * x60
x136 = 8 * x63 * x71
x137 = x125 * x35
x138 = x0 * x125
x139 = 4 * x94
x140 = x63 * x75
x141 = 2 * x19
x142 = x129 * x22
x143 = xi ^ 3
x144 = xi ^ 4
x145 = x24 * x63
x146 = x12 * x23
x147 = 8 * Spp
x148 = u ^ 11
x149 = x124 * x148
x150 = 24 * B
x151 = Bh * Fy * x150
x152 = x75 * xi
x153 = x150 * x152
x154 = Bh * xi_y
x155 = x124 * x150 * x154
x156 = Bp * x89
x157 = x40 * x70
x158 = x119 * x40
x159 = 24 * x82
x160 = Fy * x149
x161 = x152 * x36
x162 = x84 * x86
x163 = S * x148
x164 = x85 * x89
x165 = x116 * xi
x166 = 32 * x165
x167 = 16 * x89
x168 = x167 * x94
x169 = x124 * x89
x170 = x36 * xi_y
x171 = x116 * x86
x172 = 72 * x106
x173 = x70 * xi
x174 = S * x173 * x2
x175 = x159 * xi_y
x176 = x71 * xi
x177 = S * x67
x178 = Sh * x45
x179 = S * x173
x180 = B ^ 2
x181 = 36 * x180
x182 = x181 * x75
x183 = u ^ 12
x184 = x67 * xi
x185 = x184 * x40
x186 = x63 * x67
x187 = 2 * x17
x188 = x187 * x28
x189 = x17 * x31
x190 = G ^ 2
x191 = 36 * x190
x192 = x191 * x75
x193 = x148 * x63
x194 = x129 * x65
x195 = 12 * x194
x196 = 72 * x85
x197 = x177 * x196
x198 = x60 * x85
x199 = 48 * x173
x200 = 8 * Gpp
x201 = x132 * x200
x202 = S * x71
x203 = x60 * xi
x204 = 30 * x202
x205 = Fyh * x38
x206 = 36 * x63
x207 = x2 * x67
x208 = x206 * x207
x209 = u ^ 13
x210 = x209 * x64
x211 = x2 * x42
x212 = u ^ 16
x213 = x212 * x66
x214 = x129 * x2
x215 = x106 * x214
x216 = 36 * x24
x217 = x144 * x70
x218 = x125 * x196
x219 = x125 * xi
x220 = x129 * x24
x221 = u ^ 15
x222 = x125 * x95
x223 = x47 * x51
x224 = Sp * x14
x225 = x119 * x51
x226 = x124 * xi
x227 = x183 * x226
x228 = x148 * xi
x229 = x177 * xi
x230 = x124 * x228
x231 = 18 * x180
x232 = x135 * x67
x233 = x125 * x71
x234 = 2 * x57
x235 = x183 * x63
x236 = x17 * x235
x237 = x129 * x71
x238 = 18 * x190
x239 = 15 * x63
x240 = 2 * x62
x241 = u ^ 14
x242 = x241 * x63
x243 = x36 * x69
x244 = x129 * x67
x245 = x209 * x63
x246 = x69 * x73
x247 = x129 * x75
x248 = 72 * x180
x249 = x169 * x183
x250 = x170 * x184
x251 = x36 * x83
x252 = x129 * x70
x253 = 72 * x190
x254 = 84 * S
x255 = x143 * x177
x256 = x2 * x63
x257 = x228 * x256
x258 = x241 * x64 * xi
x259 = x111 * x17
x260 = x11 * x18
x261 = x10 * x260
x262 = x124 * x181
x263 = x209 * x60
x264 = x135 * x228
x265 = x125 * x148
x266 = x17 * x219
x267 = 2 * x237
x268 = 54 * x245
x269 = 30 * x247
x270 = x124 * x191
x271 = x63 * x85
x272 = x125 * x129
x273 = x125 * x139
x274 = x169 * x209 * xi
x275 = exp(2 * x1)
x276 = Bb * x275
x277 = Gb * x275
x278 = Sb * x275
x279 = 2 * Gt
x280 = Bh * x2
x281 = x279 * x280
x282 = x18 * x41
x283 = Fx * Fy
x284 = x0 * x260
x285 = Fx * xi_y
x286 = 2 * Gp * x25
x287 = x146 * x18
x288 = x284 * xi
x289 = x18 * x2
x290 = Fxp * Fyp
x291 = 2 * x290
x292 = Gp * xi_xy
x293 = 8 * Sh
x294 = x170 * x206 * x221
x295 = x129 * x148 * x170
x296 = x203 * x241
x297 = x183 * x219
x298 = x183 * x206
x299 = 6 * B
x300 = x17 * x299
x301 = Fxt * x275
x302 = x22 * x301
x303 = x135 * x231
x304 = x212 * x63
x305 = x129 * x183
x306 = x17 * x231
x307 = x125 * x242
x308 = x272 * x67
x309 = Fx * x275
x310 = x309 * x32
x311 = Bt * x17
x312 = Bt * x275
x313 = Gt * x18
x314 = x313 * x44
x315 = Fxp * x309
x316 = St * x309
x317 = x135 * x238
x318 = x17 * x238
x319 = x18 * x277
x320 = St * x275
x321 = Gt * x2
x322 = x300 * x321
x323 = x11 * x17
x324 = Bh * Gt
x325 = Gp * x283
x326 = x18 * x283
x327 = x326 * x51
x328 = Fx * x2
x329 = 2 * xi_y
x330 = Gp * x329
x331 = x12 * x18 * x285
x332 = x124 * x65
x333 = Fxh * Gp
x334 = x11 * x333
x335 = x108 * x323
x336 = Fxh * x12 * x18
x337 = Fyt * Gp
x338 = x11 * x337
x339 = Fyt * x12 * x18
x340 = x292 * x50
x341 = Bt ^ 2
x342 = x275 * x59
x343 = Fx ^ 2
x344 = Fxp ^ 2
x345 = Gt ^ 2
x346 = x17 ^ 2
x347 = Bd * x346
x348 = x299 * x347
x349 = Bt * x309
x350 = x68 * x71
x351 = x309 * x313
x352 = x312 * x313
x353 = St * x312
x354 = 12 * G
x355 = Gt * x309
x356 = x301 * xi
x357 = 4 * x313 * x320
x358 = x321 * x68
x359 = 12 * Bh * G * x328
x360 = x152 * x17
x361 = Gp * x36
x362 = Fx * x361 * x50
x363 = Gp * x11
x364 = x202 * xi
x365 = B * x17
x366 = x275 * x343
x367 = x366 * x65
x368 = 18 * x367
x369 = x187 * x276
x370 = x126 * x275
x371 = x127 * x275
x372 = 2 * x319
x373 = B * x347
x374 = x105 * x373
x375 = x104 * x373
x376 = x187 * x256 * x67
x377 = x214 * x59
x378 = x292 * x323
x379 = x150 * x349
x380 = x152 * x349
x381 = 24 * x85
x382 = x349 * x381
x383 = x309 * x311
x384 = 24 * G * x355
x385 = x316 * x86
x386 = Fx * x11
x387 = x366 * x67
x388 = 36 * B
x389 = 72 * B
x390 = 48 * B
x391 = x366 * xi
x392 = x300 * x301
x393 = 20 * x193
x394 = 4 * x352
x395 = x275 * x341
x396 = x187 * x315
x397 = x366 * x85
x398 = x301 * x38
x399 = x275 * x345
x400 = x347 * x389
x401 = Gt * x299 * x36
x402 = x241 * x256
x403 = x214 * x67
x404 = Bh * x17 * x37
x405 = Fx * x330
x406 = S * x183 * xi
x407 = 2 * x236
x408 = x2 * x348
x409 = x214 * x373
x410 = x383 * x68
x411 = x351 * x68
x412 = S * x389
x413 = x228 * x397
x414 = x17 * x354 * x355
x415 = x268 * x366
x416 = x209 * x366
x417 = x17 * x228 * x366
x418 = x241 * x391
x419 = x306 * x366
x420 = x318 * x366
x421 = 3 * G * u
x422 = x18 * x6
x423 = u * x6
x424 = x1 * x6
x425 = 3 * x424
x426 = 2 * x4
x427 = x426 + 2
x428 = 9 * (G * x4 + G) ^ 2
x429 = x190 * x24
x430 = 9 * x429
x431 = x63 * (x430 + 4)
x432 = 6 * S * x5 * (3 * x429 + 2)
x433 = x6 ^ 2
x434 = 2 * x3
x435 = Gpp * x6
x436 = x10 * x37
x437 = 4 * Spp
x438 = 17 * x3
x439 = 9 * x190
x440 = x10 * x6
x441 = 5 * x3 + 3 * x4 + x425 + 3
x442 = Gp * x6
x443 = 9 * x4 + x438 + 7
x444 = 3 * x16
x445 = 36 * x116
x446 = 36 * x119
x447 = 36 * x229
ABCS[1] = x8 * x9
ABCS[2] = 8 * x10 * x8
ABCS[3] = u * x11 * x7
ABCS[4] = 12 * B * Fx * Gh * S * x148 * x17 * x2 + 12 * B * Fx * Gh * S * x17 * x183 * x2 * xi + 6 * B * Fx * Gh * x129 * x17 * x2 * x67 + 6 * B * Fx * Gh * x17 * x2 * x241 * x63 + 6 * B * Fx * Gh * x17 * x2 * x70 + 12 * B * Fx * Gh * x17 * x2 * x75 * xi + 144 * B * Fy * G * S * x18 * x183 * xi_y + 144 * B * Fy * G * S * x18 * x209 * xi * xi_y + 72 * B * Fy * G * x129 * x148 * x18 * xi_y + 72 * B * Fy * G * x18 * x221 * x63 * xi_y + 144 * B * Fy * G * x18 * x67 * xi * xi_y + 72 * B * Fy * G * x18 * x75 * xi_y + 24 * B * Fy * Gh * S * x148 * x18 + 24 * B * Fy * Gh * S * x18 * x183 * xi + 12 * B * Fy * Gh * x129 * x18 * x67 + 12 * B * Fy * Gh * x18 * x241 * x63 + 12 * B * Fy * Gh * x18 * x70 + 24 * B * Fy * Gh * x18 * x75 * xi + 12 * B * Fy * S * Sh * x148 * x17 + 156 * B * Fy * S * x17 * x67 * xi * xi_y + 144 * B * Fy * S * x17 * x75 * xi_y + 12 * B * Fy * Sh * x17 * x70 + 12 * B * Fy * Sh * x17 * x75 * xi + 54 * B * Fy * x129 * x17 * x70 * xi_y + 102 * B * Fy * x17 * x183 * x63 * xi_y + 42 * B * Fy * x17 * x24 * xi_y + 96 * B * Fy * x17 * x65 * xi * xi_y + 12 * B * Fyh * S * x17 * x70 + 12 * B * Fyh * S * x17 * x75 * xi + 6 * B * Fyh * x129 * x17 * x65 + 6 * B * Fyh * x148 * x17 * x63 + 6 * B * Fyh * x17 * x22 + 12 * B * Fyh * x17 * x24 * xi + 72 * B * G * S * x125 * x148 * x18 + 72 * B * G * S * x125 * x18 * x183 * xi + 72 * B * G * S * x18 * x209 * x60 + 72 * B * G * S * x18 * x241 * x60 * xi + 36 * B * G * x125 * x129 * x18 * x67 + 36 * B * G * x125 * x18 * x241 * x63 + 36 * B * G * x125 * x18 * x70 + 72 * B * G * x125 * x18 * x75 * xi + 36 * B * G * x129 * x18 * x183 * x60 + 72 * B * G * x148 * x18 * x60 * xi + 36 * B * G * x18 * x212 * x60 * x63 + 36 * B * G * x18 * x60 * x67 + 24 * B * Gh * S * x148 * x18 * xi * xi_y + 24 * B * Gh * S * x18 * x67 * xi_y + 12 * B * Gh * x129 * x18 * x75 * xi_y + 12 * B * Gh * x18 * x209 * x63 * xi_y + 12 * B * Gh * x18 * x65 * xi_y + 24 * B * Gh * x18 * x70 * xi * xi_y + 12 * B * S * Sh * x17 * x67 * xi_y + 72 * B * S * x125 * x17 * x70 + 72 * B * S * x125 * x17 * x75 * xi + 84 * B * S * x148 * x17 * x60 * xi + 72 * B * S * x17 * x60 * x67 + 12 * B * S * x17 * x65 * xi_yy + 12 * B * S * x17 * x70 * xi * xi_yy + 12 * B * Sh * x17 * x65 * xi_y + 12 * B * Sh * x17 * x70 * xi * xi_y + 24 * B * x125 * x129 * x17 * x65 + 48 * B * x125 * x148 * x17 * x63 + 24 * B * x125 * x17 * x22 + 48 * B * x125 * x17 * x24 * xi + 6 * B * x129 * x17 * x24 * xi_yy + 30 * B * x129 * x17 * x60 * x75 + 54 * B * x17 * x209 * x60 * x63 + 12 * B * x17 * x22 * xi * xi_yy + 6 * B * x17 * x23 * xi_yy + 18 * B * x17 * x60 * x65 + 48 * B * x17 * x60 * x70 * xi + 6 * B * x17 * x63 * x67 * xi_yy - B * x206 * x212 * x397 - 84 * B * x230 * x366 + 24 * Bd * Bp * S * x129 * x2 * x346 * x70 + 8 * Bd * Bp * S * x143 * x2 * x346 * x75 + 8 * Bd * Bp * S * x2 * x24 * x346 + 24 * Bd * Bp * S * x2 * x346 * x65 * xi + 2 * Bd * Bp * x0 * x2 * x346 + 12 * Bd * Bp * x129 * x148 * x2 * x346 * x63 + 12 * Bd * Bp * x129 * x2 * x22 * x346 + 8 * Bd * Bp * x143 * x2 * x24 * x346 + 2 * Bd * Bp * x144 * x2 * x346 * x65 + 8 * Bd * Bp * x183 * x2 * x346 * x64 + 8 * Bd * Bp * x2 * x209 * x346 * x64 * xi + 2 * Bd * Bp * x2 * x221 * x346 * x66 + 8 * Bd * Bp * x2 * x23 * x346 * xi + 24 * Bd * Bp * x2 * x346 * x63 * x67 * xi + 12 * Bd * Bp * x2 * x346 * x63 * x75 + 24 * Bh * Fy * G * S * x148 * x18 + 24 * Bh * Fy * G * S * x18 * x183 * xi + 12 * Bh * Fy * G * x129 * x18 * x67 + 12 * Bh * Fy * G * x18 * x241 * x63 + 12 * Bh * Fy * G * x18 * x70 + 24 * Bh * Fy * G * x18 * x75 * xi + 28 * Bh * Fy * S * x17 * x70 + 32 * Bh * Fy * S * x17 * x75 * xi + 12 * Bh * Fy * x129 * x17 * x65 + 20 * Bh * Fy * x148 * x17 * x63 + 8 * Bh * Fy * x17 * x22 + 20 * Bh * Fy * x17 * x24 * xi + 24 * Bh * G * S * x148 * x18 * xi * xi_y + 24 * Bh * G * S * x18 * x67 * xi_y + 12 * Bh * G * x129 * x18 * x75 * xi_y + 12 * Bh * G * x18 * x209 * x63 * xi_y + 12 * Bh * G * x18 * x65 * xi_y + 24 * Bh * G * x18 * x70 * xi * xi_y + 8 * Bh * Gh * S * x18 * x67 * xi + 8 * Bh * Gh * S * x18 * x75 + 4 * Bh * Gh * x129 * x18 * x70 + 4 * Bh * Gh * x18 * x183 * x63 + 4 * Bh * Gh * x18 * x24 + 8 * Bh * Gh * x18 * x65 * xi + 4 * Bh * S * Sh * x17 * x75 + 32 * Bh * S * x17 * x65 * xi_y + 32 * Bh * S * x17 * x70 * xi * xi_y + 4 * Bh * Sh * x17 * x24 + 4 * Bh * Sh * x17 * x65 * xi + 12 * Bh * x129 * x17 * x24 * xi_y - Bh * x153 * x36 + 24 * Bh * x17 * x22 * xi * xi_y + 12 * Bh * x17 * x23 * xi_y + 20 * Bh * x17 * x63 * x67 * xi_y + 4 * Bp * Fxt * S * x17 * x275 * x65 + 4 * Bp * Fxt * S * x17 * x275 * x70 * xi + 2 * Bp * Fxt * x129 * x17 * x24 * x275 + 4 * Bp * Fxt * x17 * x22 * x275 * xi + 2 * Bp * Fxt * x17 * x23 * x275 + 2 * Bp * Fxt * x17 * x275 * x63 * x67 + 4 * Bp * S * x17 * x275 * x343 * x67 * xi + 4 * Bp * S * x17 * x275 * x343 * x75 - Bp * x101 * x157 + 2 * Bp * x129 * x17 * x275 * x343 * x70 - Bp * x129 * x30 * x74 - 2 * Bp * x135 * x235 + 2 * Bp * x17 * x183 * x275 * x343 * x63 + 2 * Bp * x17 * x24 * x275 * x343 + 4 * Bp * x17 * x275 * x343 * x65 * xi - Bp * x20 * x39 * xi + 16 * Bpp * Fy * S * x17 * x65 * xi_y + 16 * Bpp * Fy * S * x17 * x70 * xi * xi_y + 8 * Bpp * Fy * x129 * x17 * x24 * xi_y + 16 * Bpp * Fy * x17 * x22 * xi * xi_y + 8 * Bpp * Fy * x17 * x23 * xi_y + 8 * Bpp * Fy * x17 * x63 * x67 * xi_y + 8 * Bpp * S * x125 * x17 * x24 + 8 * Bpp * S * x125 * x17 * x65 * xi + 8 * Bpp * S * x17 * x60 * x70 + 8 * Bpp * S * x17 * x60 * x75 * xi + 4 * Bpp * x0 * x125 * x17 + 4 * Bpp * x125 * x129 * x17 * x22 + 8 * Bpp * x125 * x17 * x23 * xi + 4 * Bpp * x125 * x17 * x63 * x75 + 4 * Bpp * x129 * x17 * x60 * x65 + 4 * Bpp * x148 * x17 * x60 * x63 + 4 * Bpp * x17 * x22 * x60 + 8 * Bpp * x17 * x24 * x60 * xi + 4 * Bs * S * x17 * x24 + 4 * Bs * S * x17 * x65 * xi + 2 * Bs * x0 * x17 + 2 * Bs * x129 * x17 * x22 + 4 * Bs * x17 * x23 * xi + 2 * Bs * x17 * x63 * x75 + 12 * Bt * Fy * G * S * x148 * x17 * x2 + 12 * Bt * Fy * G * S * x17 * x183 * x2 * xi + 6 * Bt * Fy * G * x129 * x17 * x2 * x67 + 6 * Bt * Fy * G * x17 * x2 * x241 * x63 + 6 * Bt * Fy * G * x17 * x2 * x70 + 12 * Bt * Fy * G * x17 * x2 * x75 * xi + 12 * Bt * G * S * x148 * x17 * x2 * xi * xi_y + 12 * Bt * G * S * x17 * x2 * x67 * xi_y + 6 * Bt * G * x129 * x17 * x2 * x75 * xi_y + 6 * Bt * G * x17 * x2 * x209 * x63 * xi_y + 6 * Bt * G * x17 * x2 * x65 * xi_y + 12 * Bt * G * x17 * x2 * x70 * xi * xi_y + 4 * Bt * Gh * S * x17 * x2 * x67 * xi + 4 * Bt * Gh * S * x17 * x2 * x75 + 2 * Bt * Gh * x129 * x17 * x2 * x70 + 2 * Bt * Gh * x17 * x183 * x2 * x63 + 2 * Bt * Gh * x17 * x2 * x24 + 4 * Bt * Gh * x17 * x2 * x65 * xi - Bt * St * x275 * x78 + 168 * Fx * Fy * G * S * x148 * x17 * x2 * xi + 144 * Fx * Fy * G * S * x17 * x2 * x67 + 60 * Fx * Fy * G * x129 * x17 * x2 * x75 + 108 * Fx * Fy * G * x17 * x2 * x209 * x63 + 36 * Fx * Fy * G * x17 * x2 * x65 + 96 * Fx * Fy * G * x17 * x2 * x70 * xi + 16 * Fx * Fy * Gpp * S * x17 * x2 * x70 + 16 * Fx * Fy * Gpp * S * x17 * x2 * x75 * xi + 8 * Fx * Fy * Gpp * x129 * x17 * x2 * x65 + 8 * Fx * Fy * Gpp * x148 * x17 * x2 * x63 + 8 * Fx * Fy * Gpp * x17 * x2 * x22 + 16 * Fx * Fy * Gpp * x17 * x2 * x24 * xi + 16 * Fx * Fy * S * Spp * x18 * x2 * x70 + 72 * Fx * Fy * S * x18 * x190 * x2 * x209 + 72 * Fx * Fy * S * x18 * x190 * x2 * x241 * xi + 84 * Fx * Fy * S * x18 * x2 * x65 + 60 * Fx * Fy * S * x18 * x2 * x70 * xi + 16 * Fx * Fy * Spp * x18 * x2 * x22 + 16 * Fx * Fy * Spp * x18 * x2 * x24 * xi + 36 * Fx * Fy * x129 * x18 * x183 * x190 * x2 + 72 * Fx * Fy * x148 * x18 * x190 * x2 * xi + 36 * Fx * Fy * x18 * x190 * x2 * x212 * x63 + 36 * Fx * Fy * x18 * x190 * x2 * x67 + 30 * Fx * Fy * x18 * x2 * x63 * x67 + 4 * Fx * Fyp * S * x18 * x2 * x24 + 4 * Fx * Fyp * S * x18 * x2 * x65 * xi + 2 * Fx * Fyp * x0 * x18 * x2 + 2 * Fx * Fyp * x129 * x18 * x2 * x22 + 4 * Fx * Fyp * x18 * x2 * x23 * xi + 2 * Fx * Fyp * x18 * x2 * x63 * x75 + 24 * Fx * G * Gh * S * x148 * x18 * x2 + 24 * Fx * G * Gh * S * x18 * x183 * x2 * xi + 12 * Fx * G * Gh * x129 * x18 * x2 * x67 + 12 * Fx * G * Gh * x18 * x2 * x241 * x63 + 12 * Fx * G * Gh * x18 * x2 * x70 + 24 * Fx * G * Gh * x18 * x2 * x75 * xi + 12 * Fx * G * S * Sh * x148 * x17 * x2 + 156 * Fx * G * S * x17 * x2 * x67 * xi * xi_y + 144 * Fx * G * S * x17 * x2 * x75 * xi_y + 12 * Fx * G * Sh * x17 * x2 * x70 + 12 * Fx * G * Sh * x17 * x2 * x75 * xi + 54 * Fx * G * x129 * x17 * x2 * x70 * xi_y + 102 * Fx * G * x17 * x183 * x2 * x63 * xi_y + 42 * Fx * G * x17 * x2 * x24 * xi_y + 96 * Fx * G * x17 * x2 * x65 * xi * xi_y + 28 * Fx * Gh * S * x17 * x2 * x70 + 32 * Fx * Gh * S * x17 * x2 * x75 * xi + 12 * Fx * Gh * x129 * x17 * x2 * x65 + 20 * Fx * Gh * x148 * x17 * x2 * x63 + 8 * Fx * Gh * x17 * x2 * x22 + 20 * Fx * Gh * x17 * x2 * x24 * xi + 16 * Fx * Gpp * S * x17 * x2 * x65 * xi_y + 16 * Fx * Gpp * S * x17 * x2 * x70 * xi * xi_y + 8 * Fx * Gpp * x129 * x17 * x2 * x24 * xi_y + 16 * Fx * Gpp * x17 * x2 * x22 * xi * xi_y + 8 * Fx * Gpp * x17 * x2 * x23 * xi_y + 8 * Fx * Gpp * x17 * x2 * x63 * x67 * xi_y + 16 * Fx * S * Spp * x18 * x2 * x65 * xi_y + 72 * Fx * S * x18 * x183 * x190 * x2 * xi_y + 72 * Fx * S * x18 * x190 * x2 * x209 * xi * xi_y + 68 * Fx * S * x18 * x2 * x24 * xi_y + 56 * Fx * S * x18 * x2 * x65 * xi * xi_y + 24 * Fx * Sh * x18 * x2 * x22 + 16 * Fx * Sh * x18 * x2 * x24 * xi + 16 * Fx * Spp * x18 * x2 * x22 * xi * xi_y + 16 * Fx * Spp * x18 * x2 * x23 * xi_y + 36 * Fx * x129 * x148 * x18 * x190 * x2 * xi_y + 36 * Fx * x18 * x190 * x2 * x221 * x63 * xi_y + 72 * Fx * x18 * x190 * x2 * x67 * xi * xi_y + 36 * Fx * x18 * x190 * x2 * x75 * xi_y + 24 * Fx * x18 * x2 * x63 * x75 * xi_y - Fx * x18 * x214 * x24 * x30 - Fx * x280 * x37 * x71 - Fx * x402 * x404 - Fx * x403 * x404 + 12 * Fxh * G * S * x17 * x2 * x70 + 12 * Fxh * G * S * x17 * x2 * x75 * xi + 6 * Fxh * G * x129 * x17 * x2 * x65 + 6 * Fxh * G * x148 * x17 * x2 * x63 + 6 * Fxh * G * x17 * x2 * x22 + 12 * Fxh * G * x17 * x2 * x24 * xi + 4 * Fxh * S * x18 * x2 * x22 + 8 * Fxh * S * x18 * x2 * x24 * xi + 8 * Fxh * x18 * x2 * x63 * x70 - Fxh * x2 * x286 - Fxh * x261 - Fxh * x287 - Fxh * x288 + 4 * Fxp * Fy * S * x18 * x2 * x24 + 4 * Fxp * Fy * S * x18 * x2 * x65 * xi + 2 * Fxp * Fy * x0 * x18 * x2 + 2 * Fxp * Fy * x129 * x18 * x2 * x22 + 4 * Fxp * Fy * x18 * x2 * x23 * xi + 2 * Fxp * Fy * x18 * x2 * x63 * x75 + 4 * Fxt * Gp * S * x18 * x275 * x65 + 4 * Fxt * Gp * S * x18 * x275 * x70 * xi + 2 * Fxt * Gp * x129 * x18 * x24 * x275 + 4 * Fxt * Gp * x18 * x22 * x275 * xi + 2 * Fxt * Gp * x18 * x23 * x275 + 2 * Fxt * Gp * x18 * x275 * x63 * x67 + 4 * Fxt * S * Sp * x17 * x275 * x65 + 4 * Fxt * Sp * x17 * x22 * x275 * xi + 4 * Fxt * Sp * x17 * x23 * x275 + 4 * Fxt * x0 * x17 * x275 * xi + 4 * Fxt * x10 * x17 * x275 + 24 * Fy * G * Gt * S * x148 * x18 * x2 + 24 * Fy * G * Gt * S * x18 * x183 * x2 * xi + 12 * Fy * G * Gt * x129 * x18 * x2 * x67 + 12 * Fy * G * Gt * x18 * x2 * x241 * x63 + 12 * Fy * G * Gt * x18 * x2 * x70 + 24 * Fy * G * Gt * x18 * x2 * x75 * xi + 12 * Fy * G * S * St * x148 * x17 * x2 + 12 * Fy * G * St * x17 * x2 * x70 + 12 * Fy * G * St * x17 * x2 * x75 * xi + 4 * Fy * Gp * S * x18 * x70 * xi_y + 4 * Fy * Gp * S * x18 * x75 * xi * xi_y + 2 * Fy * Gp * x129 * x18 * x65 * xi_y + 2 * Fy * Gp * x148 * x18 * x63 * xi_y + 2 * Fy * Gp * x18 * x22 * xi_y + 4 * Fy * Gp * x18 * x24 * xi * xi_y + 28 * Fy * Gt * S * x17 * x2 * x70 + 32 * Fy * Gt * S * x17 * x2 * x75 * xi + 12 * Fy * Gt * x129 * x17 * x2 * x65 + 20 * Fy * Gt * x148 * x17 * x2 * x63 + 8 * Fy * Gt * x17 * x2 * x22 + 20 * Fy * Gt * x17 * x2 * x24 * xi + 4 * Fy * S * Sp * x17 * x70 * xi_y + 4 * Fy * Sp * x17 * x22 * xi_y + 4 * Fy * Sp * x17 * x24 * xi * xi_y + 24 * Fy * St * x18 * x2 * x22 + 16 * Fy * St * x18 * x2 * x24 * xi + 4 * Fy * x0 * x17 * xi_y - Fy * x159 * x227 + 4 * Fy * x17 * x23 * xi * xi_y - Fy * x227 * x321 * x68 - Fy * x55 * x99 - Fy * x56 * x98 + 4 * Fyh * Gp * S * x18 * x65 + 4 * Fyh * Gp * S * x18 * x70 * xi + 2 * Fyh * Gp * x129 * x18 * x24 + 4 * Fyh * Gp * x18 * x22 * xi + 2 * Fyh * Gp * x18 * x23 + 2 * Fyh * Gp * x18 * x63 * x67 + 4 * Fyh * S * Sp * x17 * x65 + 4 * Fyh * Sp * x17 * x22 * xi + 4 * Fyh * Sp * x17 * x23 + 4 * Fyh * x0 * x17 * xi + 4 * Fyh * x10 * x17 - Fyh * x100 - Fyh * x136 + 12 * Fyt * G * S * x17 * x2 * x70 + 12 * Fyt * G * S * x17 * x2 * x75 * xi + 6 * Fyt * G * x129 * x17 * x2 * x65 + 6 * Fyt * G * x148 * x17 * x2 * x63 + 6 * Fyt * G * x17 * x2 * x22 + 12 * Fyt * G * x17 * x2 * x24 * xi + 4 * Fyt * S * x18 * x2 * x22 + 8 * Fyt * S * x18 * x2 * x24 * xi + 8 * Fyt * x18 * x2 * x63 * x70 - Fyt * x2 * x286 - Fyt * x261 - Fyt * x287 - Fyt * x288 + 24 * G * Gt * S * x148 * x18 * x2 * xi * xi_y + 24 * G * Gt * S * x18 * x2 * x67 * xi_y + 12 * G * Gt * x129 * x18 * x2 * x75 * xi_y + 12 * G * Gt * x18 * x2 * x209 * x63 * xi_y + 12 * G * Gt * x18 * x2 * x65 * xi_y + 24 * G * Gt * x18 * x2 * x70 * xi * xi_y + 12 * G * S * St * x17 * x2 * x67 * xi_y + 24 * G * S * x17 * x2 * x65 * xi_xy + 24 * G * S * x17 * x2 * x70 * xi * xi_xy + 12 * G * St * x17 * x2 * x65 * xi_y + 12 * G * St * x17 * x2 * x70 * xi * xi_y + 12 * G * x129 * x17 * x2 * x24 * xi_xy + 24 * G * x17 * x2 * x22 * xi * xi_xy + 12 * G * x17 * x2 * x23 * xi_xy + 12 * G * x17 * x2 * x63 * x67 * xi_xy + 8 * Gc * S * x17 * x2 * x24 + 8 * Gc * S * x17 * x2 * x65 * xi + 4 * Gc * x0 * x17 * x2 + 4 * Gc * x129 * x17 * x2 * x22 + 8 * Gc * x17 * x2 * x23 * xi + 4 * Gc * x17 * x2 * x63 * x75 + 24 * Gd * Gp * S * x129 * x2 * x70 + 8 * Gd * Gp * S * x143 * x2 * x75 + 8 * Gd * Gp * S * x2 * x24 + 24 * Gd * Gp * S * x2 * x65 * xi + 2 * Gd * Gp * x0 * x2 + 12 * Gd * Gp * x129 * x148 * x2 * x63 + 12 * Gd * Gp * x129 * x2 * x22 + 8 * Gd * Gp * x143 * x2 * x24 + 2 * Gd * Gp * x144 * x2 * x65 + 8 * Gd * Gp * x183 * x2 * x64 + 8 * Gd * Gp * x2 * x209 * x64 * xi + 2 * Gd * Gp * x2 * x221 * x66 + 8 * Gd * Gp * x2 * x23 * xi + 24 * Gd * Gp * x2 * x63 * x67 * xi + 12 * Gd * Gp * x2 * x63 * x75 + 8 * Gh * Gt * S * x18 * x2 * x67 * xi + 8 * Gh * Gt * S * x18 * x2 * x75 + 4 * Gh * Gt * x129 * x18 * x2 * x70 + 4 * Gh * Gt * x18 * x183 * x2 * x63 + 4 * Gh * Gt * x18 * x2 * x24 + 8 * Gh * Gt * x18 * x2 * x65 * xi + 4 * Gh * S * St * x17 * x2 * x75 + 4 * Gh * St * x17 * x2 * x24 + 4 * Gh * St * x17 * x2 * x65 * xi + 4 * Gp * S * x18 * x24 * xi_yy + 4 * Gp * S * x18 * x275 * x343 * x67 * xi + 4 * Gp * S * x18 * x275 * x343 * x75 + 4 * Gp * S * x18 * x60 * x67 * xi + 4 * Gp * S * x18 * x60 * x75 + 4 * Gp * S * x18 * x65 * xi * xi_yy + 2 * Gp * x0 * x18 * xi_yy + 2 * Gp * x129 * x18 * x22 * xi_yy + 2 * Gp * x129 * x18 * x275 * x343 * x70 + 2 * Gp * x129 * x18 * x60 * x70 - Gp * x165 * x386 * x73 + 2 * Gp * x18 * x183 * x275 * x343 * x63 + 2 * Gp * x18 * x183 * x60 * x63 + 4 * Gp * x18 * x23 * xi * xi_yy + 2 * Gp * x18 * x24 * x275 * x343 + 2 * Gp * x18 * x24 * x60 + 4 * Gp * x18 * x275 * x343 * x65 * xi + 4 * Gp * x18 * x60 * x65 * xi + 2 * Gp * x18 * x63 * x75 * xi_yy - Gpp * x133 * x193 + 4 * Gt * S * Sh * x17 * x2 * x75 + 32 * Gt * S * x17 * x2 * x65 * xi_y + 32 * Gt * S * x17 * x2 * x70 * xi * xi_y + 4 * Gt * Sh * x17 * x2 * x24 + 4 * Gt * Sh * x17 * x2 * x65 * xi - Gt * x124 * x207 * x68 * xi_y + 12 * Gt * x129 * x17 * x2 * x24 * xi_y + 24 * Gt * x17 * x2 * x22 * xi * xi_y + 12 * Gt * x17 * x2 * x23 * xi_y + 20 * Gt * x17 * x2 * x63 * x67 * xi_y - Gt * x209 * x256 * x300 * xi_y + 8 * S * Sc * x18 * x2 * x24 + 16 * S * Sd * x129 * x2 * x24 + 16 * S * Sd * x2 * x22 * xi + 4 * S * Sp * x17 * x24 * xi_yy + 4 * S * Sp * x17 * x275 * x343 * x75 + 4 * S * Sp * x17 * x60 * x75 + 16 * S * u * x2 + 72 * S * x0 * x129 * x2 + 56 * S * x10 * x2 * xi - S * x107 - S * x123 * x142 + 40 * S * x143 * x2 * x23 + 8 * S * x144 * x2 * x22 + 2 * S * x17 * x22 * x275 * x344 + 2 * S * x17 * x22 * x61 + 2 * S * x17 * x24 * x275 * x344 * xi + 2 * S * x17 * x24 * x61 * xi + 16 * S * x18 * x2 * x22 * xi * xi_xy + 16 * S * x18 * x2 * x23 * xi_xy - S * x22 * x260 * x290 - S * x25 * x52 - S * x374 + 8 * Sc * x0 * x18 * x2 + 8 * Sc * x18 * x2 * x23 * xi + 24 * Sd * x2 * x63 * x65 + 32 * Sd * x2 * x63 * x70 * xi + 16 * Sd * x2 * x64 * x67 + 4 * Sh ^ 2 * x17 * x24 - Sh * x114 * x45 - Sh * x115 * x116 - Sh * x115 * x119 - Sh * x33 * x44 - Sh * x35 * x36 + 4 * Sp * x0 * x17 * xi_yy + 4 * Sp * x17 * x23 * xi * xi_yy + 4 * Sp * x17 * x24 * x275 * x343 + 4 * Sp * x17 * x24 * x60 + 4 * Sp * x17 * x275 * x343 * x65 * xi + 4 * Sp * x17 * x60 * x65 * xi - 8 * Sp * x282 * xi * xi_xy - Sp * x53 - Spp * x135 * x32 + 4 * St ^ 2 * x17 * x24 * x275 + 16 * St * x18 * x2 * x22 * xi * xi_y + 16 * St * x18 * x2 * x23 * xi_y - St * x24 * x289 * x293 - u * x14 - x0 * x143 * x15 + 2 * x0 * x17 * x275 * x344 * xi + 2 * x0 * x17 * x61 * xi - x0 * x18 * x51 * xi_xy - x0 * x20 * x278 - x0 * x21 + 2 * x0 * x275 * x6 * xi_xx * (x17 * (-3 * B * x423 + Bp * x6 - 4 * S * u + 2 * Sp) + x422 * (Gp - x421)) - x10 * x123 * x129 + x10 * x17 * x275 * x344 + x10 * x17 * x61 - x10 * x289 * x291 - x10 * x54 * xi - x100 * x301 - x101 * x102 - x101 * x103 - x101 * x171 - x102 * x356 - x103 * x356 - 72 * x106 * x116 * x214 - x106 * x208 - x107 * x143 - x108 * x109 - x108 * x113 - x108 * x170 * x99 - 12 * x108 * x283 * x289 - x108 * x336 - x108 * x339 - x108 * x375 - x108 * x56 * x73 - x109 * x210 - x109 * x255 - x109 * x258 - x11 * x226 * x324 * x67 - x11 * x237 * x325 - x11 * x29 * x292 - x11 * x325 * x58 - x110 * x111 - x110 * x214 * x405 - x112 * x113 - x112 * x118 - x112 * x168 - x112 * x336 - x112 * x339 - x113 * x179 - 24 * x114 * x272 - 144 * x116 * x164 - x116 * x17 * x356 * x68 - x116 * x214 * x347 * x389 - x116 * x323 * x324 - x116 * x327 - 8 * x116 * x352 - x116 * x357 - x116 * x362 - 20 * x117 * x186 - x117 * x35 * xi - x118 * x179 - x119 * x124 * x340 - 96 * x119 * x164 - 56 * x119 * x169 - x119 * x323 * x324 - 8 * x119 * x352 - x119 * x357 - x119 * x362 - x12 * x145 - x12 * x252 * x63 - x12 - x120 * x121 - x120 * x222 - 4 * x120 * x319 - x120 * x48 - x121 * x47 - x121 * x49 - x122 * x123 - x124 * x137 - x124 * x175 * x67 - x124 * x184 * x325 * x50 - x124 * x32 * xi * xi_yy - x124 * x387 * x389 - x125 * x136 - x125 * x147 * x97 - x126 * x128 - x126 * x156 * xi - x126 * x353 - x126 * x57 - x126 * x62 - x127 * x128 - x127 * x353 - x127 * x57 - x127 * x62 - x128 * x185 - x128 * x267 - x128 * x59 - x129 * x130 * x139 + x129 * x17 * x23 * x275 * x344 + x129 * x17 * x23 * x61 + x129 * x17 * x24 * x275 * x343 + x129 * x17 * x24 * x60 + 68 * x129 * x2 * x24 * x63 + 8 * x129 * x2 * x64 * x75 - x129 * x282 * x291 - x129 * x53 - x129 * x59 * x77 - x130 * x134 - 18 * x130 * x85 - x131 * x133 - x131 * x167 * x18 * xi - x132 * x200 * x24 * xi - x134 * x367 - x136 * x301 - x137 * x85 - x138 * x139 - x138 * x147 * x17 - x140 * x141 - 24 * x140 * x170 - x140 * x188 - x140 * x189 - x140 * x224 - x140 * x273 - x140 * x369 - x140 * x372 - x140 * x378 - x140 * x396 - x141 * x142 - x142 * x188 - x142 * x189 - x142 * x224 - x142 * x273 - x142 * x369 - x142 * x372 - x142 * x378 - x142 * x396 + 16 * x143 * x2 * x63 * x65 - x143 * x223 - x143 * x374 - x144 * x146 - x147 * x202 * x60 - x147 * x203 * x58 - x147 * x219 * x25 - x148 * x17 * x256 * x405 - x149 * x151 - x149 * x316 * x68 - x149 * x359 - x149 * x379 - x149 * x384 - x15 * x4 - x150 * x154 * x71 * xi - x150 * x163 * x351 - x150 * x351 * x406 - x151 * x227 - x152 * x162 - x152 * x17 * x316 * x68 - x152 * x385 - x153 * x351 - x155 * x228 - x155 * x67 - x156 * x157 - x156 * x78 * xi - x158 * x276 - x158 * x28 - x158 * x315 - x158 * x81 - x159 * x160 - x159 * x161 - x160 * x358 - x161 * x358 - x162 * x163 - x163 * x382 - x163 * x385 - 156 * x164 * x229 - 102 * x164 * x235 - 54 * x164 * x252 - x165 * x201 - x165 * x218 - x166 * x34 - x166 * x351 - x166 * x383 - x168 * x179 - x169 * x65 * x99 - x17 * x186 * x26 + 6 * x17 * x22 * x275 * x343 * xi - x17 * x22 * x328 * x330 + 6 * x17 * x22 * x60 * xi + 9 * x17 * x23 * x275 * x343 + 9 * x17 * x23 * x60 - x17 * x239 * x387 + x17 * x275 * x344 * x63 * x70 - x17 * x316 * x35 - x17 * x52 * x63 * x65 + x17 * x61 * x63 * x70 - x170 * x182 - x170 * x192 - x171 * x356 - x172 * x174 - x172 * x257 - x173 * x178 * x85 - x174 * x400 - x175 * x176 - x175 * x230 - x176 * x358 * xi_y - x177 * x178 * x85 + 16 * x18 * x2 * x63 * x65 * xi_xy - x18 * x223 * xi_xy - x18 * x256 * x291 * x70 - x18 * x277 * x9 - x180 * x294 - x181 * x264 - x181 * x295 - x181 * x417 - x182 * x266 - x185 * x395 - x185 * x399 - x185 * x57 - x185 * x62 - x186 * x43 - x186 * x96 - x19 * x9 - x190 * x294 - x191 * x264 - x191 * x295 - x191 * x417 - x192 * x266 - x193 * x205 - x193 * x30 * x76 - x193 * x392 - x193 * x398 - x193 * x92 - x194 * x205 - x194 * x392 - x194 * x398 - x195 * x34 - x195 * x351 - x195 * x383 - x197 * x366 - x197 * x60 - x198 * x199 - x198 * x228 * x254 - x198 * x268 - x198 * x269 - x199 * x397 + 88 * x2 * x22 * x63 * xi + 36 * x2 * x23 * x63 + 24 * x2 * x64 * x65 + 32 * x2 * x64 * x70 * xi + 4 * x2 * x66 * x67 - x2 * x9 * xi_x * (x17 * (x2 * (Fx * (78 * B * x120 + 51 * B * x140 + 27 * B * x142 - Bp * x10 * x433 - 2 * Sp * x440 + 21 * x1 + 28 * x122 + 12 * x145 + x180 * x445 + x180 * x446 + x180 * x447 + x190 * x445 + x190 * x446 + x190 * x447 + x231 * x235 + x231 * x24 + x231 * x252 + x235 * x238 + x238 * x252 + 34 * x3 + x389 * x47 + x390 * x49 - x426 + 18 * x429 - 2) + 2 * u * (Bt * x441 * x6 + Gt * x433 * x444 + St * (4 * x4 + x425 + 4))) - x423 * (Fy * u * (x421 * x443 - x442) + 4 * Fy * x435 + Gh * (10 * x3 + 6 * x4 + x425 + 6) - x444 * (Bh * x3 + Bh * x4 + Bh - 2 * Sh))) + x18 * (u * (-6 * Gh * x16 * x433 + x2 * x6 * (u * (Fx * x421 * (12 * x424 + x443) - Fx * x442 + x436 * (Bt * x3 + Bt * x4 + Bt + St)) + x279 * x441) - x293 * x5) - x30 * (-Sp * x440 + x116 * x238 + x119 * x238 + 14 * x122 + 6 * x145 + x229 * x238 + x235 * x439 + x252 * x439 - x4 + x423 * x437 + x430 + x438 - 1)) - x329 * (x17 * (x427 + x434) * (x435 + x436 * (x434 + x5)) + x18 * (x10 * x432 + x22 * x428 + x22 * x431 + x437 * x6))) - x201 * x90 - x202 * x285 * x363 - x202 * x301 * x68 - 28 * x202 * x349 - x203 * x204 - x204 * x391 - x208 * x373 - x209 * x397 * x412 - x21 * x47 - x21 * x49 - x210 * x375 - x211 * x213 - x211 * x217 - x213 * x408 - x215 * x216 - x215 * x298 - x216 * x409 - x217 * x408 - x218 * x90 - 48 * x219 * x88 - 24 * x219 * x97 - 2 * x22 * x275 * xi_x ^ 2 * (x17 * (9 * x0 * x180 * x433 + x0 * x428 + x0 * x431 + x432 + x68 * (2 * x145 + 3 * x3 * x5 + x5 ^ 2)) + x37 * x422 * (4 * x3 + x425 + x427)) - x22 * x30 * x76 - x22 * x331 - x220 * x43 - x220 * x46 - x220 * x96 - x222 * x47 - x222 * x49 - x225 * x326 - x225 * x63 - x227 * x359 - x227 * x379 - x227 * x384 - 8 * x229 * x352 - x23 * x43 - x23 * x46 - x23 * x96 - x230 * x358 * xi_y - x231 * x232 - x231 * x233 - x232 * x238 - x232 * x239 - x233 * x238 - x234 * x236 - x234 * x237 - x235 * x361 * x386 - x235 * x394 - x236 * x240 - x236 * x281 - x237 * x240 - x237 * x281 - x24 * x327 - 12 * x241 * x271 * x349 - x241 * x391 * x412 * x85 - x242 * x243 - x242 * x251 - x242 * x410 - x242 * x411 - x242 * x414 - x243 * x244 - x244 * x251 - x244 * x349 * x86 - x244 * x410 - x244 * x411 - x244 * x414 - x245 * x246 - x245 * x259 - x246 * x247 - x247 * x259 - x247 * x322 * xi_y - x248 * x249 - x248 * x250 - x248 * x274 - x249 * x253 - x25 * x26 - x25 * x340 * xi - x250 * x253 - x252 * x394 - x253 * x274 - x254 * x413 - x255 * x375 - x257 * x400 - x258 * x375 - x260 * x285 * x49 - x260 * x290 * x47 * xi - x262 * x263 - x262 * x265 - x262 * x296 - x262 * x297 - x262 * x416 - x262 * x418 - x263 * x270 - x265 * x270 - 48 * x265 * x271 - x267 * x395 - x267 * x399 - x269 * x365 * x366 - x269 * x397 - x27 * x276 - x27 * x28 - x27 * x315 - x270 * x296 - x270 * x297 - x270 * x416 - x270 * x418 - x276 * x79 - x276 * x80 - x278 * x79 - x278 * x80 - x28 * x79 - x28 * x80 - x281 * x58 - 18 * x282 * x283 - x284 * x285 - x285 * x363 * x98 - x288 * x290 - x29 * x31 - x298 * x409 - x299 * x321 * x72 - x3 * x51 - x300 * x302 - x301 * x68 * x98 - x302 * x38 - x302 * x40 - x303 * x304 - x303 * x305 - x304 * x317 - x304 * x419 - x304 * x420 - x305 * x317 - x305 * x388 * x397 - x305 * x419 - x305 * x420 - x306 * x307 - x306 * x308 - x306 * x387 - x307 * x318 - x308 * x318 - x310 * x311 - x310 * x313 - x312 * x314 - x314 * x320 - x315 * x79 - x315 * x80 - x316 * x350 - x316 * x87 - 16 * x316 * x98 - x318 * x387 - 4 * x319 * x47 - 4 * x319 * x49 - x32 * x34 - x322 * x65 * xi_y - x331 * x90 - x331 * x93 - x332 * x334 - x332 * x338 - x333 * x335 - x333 * x376 - x333 * x377 - x334 * x364 - x335 * x337 - x337 * x376 - x337 * x377 - x338 * x364 - x34 * x91 - x340 * x97 - x341 * x342 - x341 * x370 - x341 * x371 - x342 * x345 - x345 * x370 - x345 * x371 - x348 * x41 - x349 * x350 - x349 * x87 - 20 * x349 * x98 - x351 * x393 - x351 * x68 * x70 - x351 * x91 - 20 * x351 * x93 - x354 * x355 * x71 - x359 * x360 - x360 * x384 - x365 * x368 - 24 * x365 * x380 - x365 * x415 - x368 * x85 - x38 * x39 - x380 * x381 - x382 * x406 - x383 * x393 - x387 * x388 * x85 - x389 * x413 - x39 * x40 - x390 * x391 * x71 - x395 * x407 - x399 * x407 - x40 * x65 * x77 - x401 * x402 - x401 * x403 - x41 * x42 - x415 * x85 - x47 * x48 - x48 * x49 - x55 * x56 - x57 * x59 - x59 * x62 - x69 * x72 - x69 * x74 - x72 * x83 - x79 * x81 - x80 * x81 - x84 * x87 - 42 * x88 * x89 - 68 * x89 * x97 - x92 * x93

    nothing
end
